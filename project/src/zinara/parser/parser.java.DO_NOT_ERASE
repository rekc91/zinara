
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Mar 17 05:24:48 GMT-04:30 2010
//----------------------------------------------------

package zinara.parser;

import java.util.ArrayList;
import java.util.HashMap;
import java_cup.runtime.*;
import zinara.ast.*;
import zinara.ast.expression.*;
import zinara.ast.instructions.*;
import zinara.ast.type.*;
import zinara.exceptions.InvalidDictionaryAccess;
import zinara.exceptions.InvalidDictionaryDeclaration;
import zinara.exceptions.TypeClashException;
import zinara.exceptions.SyntaxErrorException;
import zinara.symtable.*;
import zinara.semantic.Operators;
import zinara.semantic.StaticTypeChecking;

/** CUP v0.10k generated parser.
  * @version Wed Mar 17 05:24:48 GMT-04:30 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\050\002\000\002\051\002\000\002\004\007" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\052\002\000\002\053\002\000\002" +
    "\010\020\000\002\033\003\000\002\033\002\000\002\034" +
    "\005\000\002\034\003\000\002\035\006\000\002\035\005" +
    "\000\002\006\004\000\002\006\003\000\002\007\004\000" +
    "\002\007\004\000\002\023\005\000\002\023\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\045\005\000\002\045\003\000\002\046\005" +
    "\000\002\046\003\000\002\047\005\000\002\013\005\000" +
    "\002\013\004\000\002\031\003\000\002\031\006\000\002" +
    "\031\003\000\002\031\003\000\002\031\006\000\002\031" +
    "\003\000\002\031\004\000\002\014\005\000\002\014\004" +
    "\000\002\032\003\000\002\032\006\000\002\032\003\000" +
    "\002\032\006\000\002\032\003\000\002\032\004\000\002" +
    "\054\002\000\002\055\002\000\002\030\012\000\002\056" +
    "\002\000\002\057\002\000\002\030\011\000\002\060\002" +
    "\000\002\030\012\000\002\061\002\000\002\062\002\000" +
    "\002\030\011\000\002\030\006\000\002\063\002\000\002" +
    "\017\007\000\002\017\003\000\002\064\002\000\002\020" +
    "\010\000\002\020\002\000\002\065\002\000\002\015\006" +
    "\000\002\066\002\000\002\015\007\000\002\015\003\000" +
    "\002\067\002\000\002\016\011\000\002\070\002\000\002" +
    "\016\010\000\002\012\005\000\002\011\005\000\002\040" +
    "\003\000\002\040\003\000\002\041\003\000\002\041\003" +
    "\000\002\043\003\000\002\043\003\000\002\042\003\000" +
    "\002\042\003\000\002\044\003\000\002\044\003\000\002" +
    "\022\005\000\002\022\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\024\006\000\002\024\005\000\002\024" +
    "\006\000\002\024\010\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\036\005\000" +
    "\002\036\003\000\002\037\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\020\036\006\047\004\050\020\051\021\052" +
    "\005\067\013\110\016\001\002\000\012\010\uffe8\021\uffe8" +
    "\060\uffe8\062\uffe8\001\002\000\012\010\uffe5\021\uffe5\060" +
    "\uffe5\062\uffe5\001\002\000\034\010\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\064\ufffe\067\ufffe\071\ufffe\077\ufffe\102" +
    "\ufffe\103\ufffe\107\ufffe\110\ufffe\001\002\000\004\037\342" +
    "\001\002\000\004\002\001\001\002\000\020\036\006\047" +
    "\004\050\020\051\021\052\005\067\013\110\016\001\002" +
    "\000\004\002\334\001\002\000\012\047\004\050\020\051" +
    "\021\052\005\001\002\000\004\037\332\001\002\000\004" +
    "\010\326\001\002\000\004\010\022\001\002\000\004\037" +
    "\uffed\001\002\000\012\010\uffe7\021\uffe7\060\uffe7\062\uffe7" +
    "\001\002\000\012\010\uffe6\021\uffe6\060\uffe6\062\uffe6\001" +
    "\002\000\004\055\ufff7\001\002\000\004\055\024\001\002" +
    "\000\010\010\027\060\ufff3\066\026\001\002\000\006\060" +
    "\ufff1\062\ufff1\001\002\000\004\010\322\001\002\000\004" +
    "\075\320\001\002\000\006\060\ufff4\062\316\001\002\000" +
    "\004\060\032\001\002\000\004\065\033\001\002\000\004" +
    "\020\034\001\002\000\012\047\004\050\020\051\021\052" +
    "\005\001\002\000\004\021\036\001\002\000\004\063\037" +
    "\001\002\000\034\010\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\064\ufff6\067\ufff6\071\ufff6\077\ufff6\102\ufff6\103\ufff6" +
    "\107\ufff6\110\ufff6\001\002\000\034\010\045\047\004\050" +
    "\020\051\021\052\005\064\044\067\013\071\052\077\047" +
    "\102\043\103\041\107\055\110\016\001\002\000\006\037" +
    "\257\063\256\001\002\000\004\037\uffda\001\002\000\026" +
    "\004\063\005\070\006\066\007\067\010\071\012\062\026" +
    "\065\034\064\055\073\070\061\001\002\000\026\004\063" +
    "\005\070\006\066\007\067\010\071\012\062\026\065\034" +
    "\064\055\073\070\061\001\002\000\010\055\242\062\uffe9" +
    "\111\uffe9\001\002\000\004\037\uffd8\001\002\000\026\004" +
    "\063\005\070\006\066\007\067\010\071\012\062\026\065" +
    "\034\064\055\073\070\061\001\002\000\006\062\213\111" +
    "\214\001\002\000\004\037\uffdd\001\002\000\004\055\210" +
    "\001\002\000\040\010\045\040\203\045\204\047\004\050" +
    "\020\051\021\052\005\064\044\067\013\071\052\077\047" +
    "\102\043\103\041\107\055\110\016\001\002\000\004\037" +
    "\202\001\002\000\004\010\057\001\002\000\004\037\uffdb" +
    "\001\002\000\004\076\060\001\002\000\026\004\063\005" +
    "\070\006\066\007\067\010\071\012\062\026\065\034\064" +
    "\055\073\070\061\001\002\000\070\011\uff92\012\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\037\uff92\057\uff92\060\uff92\062\uff92" +
    "\063\uff92\072\uff92\073\uff92\074\uff92\105\uff92\001\002\000" +
    "\026\004\063\005\070\006\066\007\067\010\071\012\062" +
    "\026\065\034\064\055\073\070\061\001\002\000\070\011" +
    "\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\037\uffa4\057\uffa4" +
    "\060\uffa4\062\uffa4\063\uffa4\072\uffa4\073\uffa4\074\uffa4\105" +
    "\uffa4\001\002\000\070\011\uffa5\012\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\037\uffa5\057\uffa5\060\uffa5\062\uffa5\063\uffa5\072" +
    "\uffa5\073\uffa5\074\uffa5\105\uffa5\001\002\000\026\004\063" +
    "\005\070\006\066\007\067\010\071\012\062\026\065\034" +
    "\064\055\073\070\061\001\002\000\070\011\uffa2\012\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\037\uffa2\057\uffa2\060\uffa2\062" +
    "\uffa2\063\uffa2\072\uffa2\073\uffa2\074\uffa2\105\uffa2\001\002" +
    "\000\070\011\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\037" +
    "\uffa1\057\uffa1\060\uffa1\062\uffa1\063\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\105\uffa1\001\002\000\070\011\uffa3\012\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\037\uffa3\057\uffa3\060\uffa3\062\uffa3" +
    "\063\uffa3\072\uffa3\073\uffa3\074\uffa3\105\uffa3\001\002\000" +
    "\074\011\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\037\uffa0" +
    "\054\167\055\166\057\uffa0\060\uffa0\062\uffa0\063\uffa0\072" +
    "\uffa0\073\uffa0\074\uffa0\105\uffa0\001\002\000\056\011\104" +
    "\012\120\014\075\015\117\016\076\017\111\020\102\021" +
    "\112\022\107\023\113\024\124\025\100\026\103\027\101" +
    "\030\114\031\105\032\077\033\122\063\134\072\121\073" +
    "\123\074\115\001\002\000\026\004\063\005\070\006\066" +
    "\007\067\010\071\012\062\026\065\034\064\055\073\070" +
    "\061\001\002\000\056\011\104\012\120\014\075\015\117" +
    "\016\076\017\111\020\102\021\112\022\107\023\113\024" +
    "\124\025\100\026\103\027\101\030\114\031\105\032\077" +
    "\033\122\060\106\072\121\073\123\074\115\001\002\000" +
    "\026\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\012\uff8c" +
    "\026\uff8c\034\uff8c\055\uff8c\070\uff8c\001\002\000\026\004" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\012\uff8a\026\uff8a" +
    "\034\uff8a\055\uff8a\070\uff8a\001\002\000\026\004\uff7e\005" +
    "\uff7e\006\uff7e\007\uff7e\010\uff7e\012\uff7e\026\uff7e\034\uff7e" +
    "\055\uff7e\070\uff7e\001\002\000\026\004\uff83\005\uff83\006" +
    "\uff83\007\uff83\010\uff83\012\uff83\026\uff83\034\uff83\055\uff83" +
    "\070\uff83\001\002\000\026\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\012\uff81\026\uff81\034\uff81\055\uff81\070\uff81" +
    "\001\002\000\026\004\uff88\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\012\uff88\026\uff88\034\uff88\055\uff88\070\uff88\001\002" +
    "\000\026\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\012" +
    "\uff82\026\uff82\034\uff82\055\uff82\070\uff82\001\002\000\026" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\026" +
    "\uff8e\034\uff8e\055\uff8e\070\uff8e\001\002\000\026\004\uff7f" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\012\uff7f\026\uff7f\034" +
    "\uff7f\055\uff7f\070\uff7f\001\002\000\070\011\uff9f\012\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\037\uff9f\057\uff9f\060\uff9f\062" +
    "\uff9f\063\uff9f\072\uff9f\073\uff9f\074\uff9f\105\uff9f\001\002" +
    "\000\026\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\012" +
    "\uff86\026\uff86\034\uff86\055\uff86\070\uff86\001\002\000\026" +
    "\004\063\005\070\006\066\007\067\010\071\012\062\026" +
    "\065\034\064\055\073\070\061\001\002\000\026\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\026\uff89\034" +
    "\uff89\055\uff89\070\uff89\001\002\000\026\004\uff87\005\uff87" +
    "\006\uff87\007\uff87\010\uff87\012\uff87\026\uff87\034\uff87\055" +
    "\uff87\070\uff87\001\002\000\026\004\uff85\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\012\uff85\026\uff85\034\uff85\055\uff85\070" +
    "\uff85\001\002\000\026\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\012\uff80\026\uff80\034\uff80\055\uff80\070\uff80\001" +
    "\002\000\026\004\063\005\070\006\066\007\067\010\071" +
    "\012\062\026\065\034\064\055\073\070\061\001\002\000" +
    "\026\004\063\005\070\006\066\007\067\010\071\012\062" +
    "\026\065\034\064\055\073\070\061\001\002\000\026\004" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\012\uff8b\026\uff8b" +
    "\034\uff8b\055\uff8b\070\uff8b\001\002\000\026\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\026\uff8d\034\uff8d" +
    "\055\uff8d\070\uff8d\001\002\000\026\004\063\005\070\006" +
    "\066\007\067\010\071\012\062\026\065\034\064\055\073" +
    "\070\061\001\002\000\026\004\uff7d\005\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\012\uff7d\026\uff7d\034\uff7d\055\uff7d\070\uff7d" +
    "\001\002\000\026\004\063\005\070\006\066\007\067\010" +
    "\071\012\062\026\065\034\064\055\073\070\061\001\002" +
    "\000\026\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\012" +
    "\uff84\026\uff84\034\uff84\055\uff84\070\uff84\001\002\000\026" +
    "\004\063\005\070\006\066\007\067\010\071\012\062\026" +
    "\065\034\064\055\073\070\061\001\002\000\070\011\104" +
    "\012\120\014\075\015\117\016\076\017\111\020\102\021" +
    "\112\022\107\023\113\024\124\025\100\026\103\027\101" +
    "\030\114\031\105\032\077\033\122\037\uff9d\057\uff9d\060" +
    "\uff9d\062\uff9d\063\uff9d\072\121\073\123\074\115\105\uff9d" +
    "\001\002\000\070\011\uff94\012\uff94\014\uff94\015\uff94\016" +
    "\uff94\017\uff94\020\102\021\112\022\107\023\113\024\124" +
    "\025\100\026\103\027\101\030\114\031\105\032\077\033" +
    "\122\037\uff94\057\uff94\060\uff94\062\uff94\063\uff94\072\uff94" +
    "\073\uff94\074\uff94\105\uff94\001\002\000\070\011\uff95\012" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\102\021\112" +
    "\022\107\023\113\024\124\025\100\026\103\027\101\030" +
    "\114\031\105\032\077\033\122\037\uff95\057\uff95\060\uff95" +
    "\062\uff95\063\uff95\072\uff95\073\uff95\074\uff95\105\uff95\001" +
    "\002\000\070\011\104\012\120\014\075\015\117\016\076" +
    "\017\111\020\102\021\112\022\107\023\113\024\124\025" +
    "\100\026\103\027\101\030\114\031\105\032\077\033\122" +
    "\037\uff9e\057\uff9e\060\uff9e\062\uff9e\063\uff9e\072\121\073" +
    "\123\074\115\105\uff9e\001\002\000\070\011\uff93\012\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\020\102\021\112\022" +
    "\107\023\113\024\124\025\100\026\103\027\101\030\114" +
    "\031\105\032\077\033\122\037\uff93\057\uff93\060\uff93\062" +
    "\uff93\063\uff93\072\uff93\073\uff93\074\uff93\105\uff93\001\002" +
    "\000\070\011\104\012\120\014\075\015\117\016\076\017" +
    "\111\020\102\021\112\022\107\023\113\024\124\025\100" +
    "\026\103\027\101\030\114\031\105\032\077\033\122\037" +
    "\uff9c\057\uff9c\060\uff9c\062\uff9c\063\uff9c\072\121\073\123" +
    "\074\115\105\uff9c\001\002\000\032\010\uffc8\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\064\uffc8\067\uffc8\071\uffc8\077\uffc8" +
    "\102\uffc8\103\uffc8\107\uffc8\001\002\000\032\010\140\047" +
    "\004\050\020\051\021\052\005\064\137\067\013\071\143" +
    "\077\047\102\043\103\041\107\055\001\002\000\036\010" +
    "\140\040\161\043\164\047\004\050\020\051\021\052\005" +
    "\064\137\067\013\071\143\077\047\102\043\103\041\107" +
    "\055\001\002\000\026\004\063\005\070\006\066\007\067" +
    "\010\071\012\062\026\065\034\064\055\073\070\061\001" +
    "\002\000\010\055\152\062\uffe9\111\uffe9\001\002\000\004" +
    "\037\uffd0\001\002\000\004\037\uffd4\001\002\000\004\055" +
    "\147\001\002\000\004\037\146\001\002\000\004\037\uffd2" +
    "\001\002\000\046\010\uffd5\040\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\064\uffd5\067\uffd5" +
    "\071\uffd5\077\uffd5\102\uffd5\103\uffd5\104\uffd5\106\uffd5\107" +
    "\uffd5\001\002\000\026\004\063\005\070\006\066\007\067" +
    "\010\071\012\062\026\065\034\064\055\073\070\061\001" +
    "\002\000\056\011\104\012\120\014\075\015\117\016\076" +
    "\017\111\020\102\021\112\022\107\023\113\024\124\025" +
    "\100\026\103\027\101\030\114\031\105\032\077\033\122" +
    "\060\151\072\121\073\123\074\115\001\002\000\004\037" +
    "\uffd3\001\002\000\026\004\063\005\070\006\066\007\067" +
    "\010\071\012\062\026\065\034\064\055\073\070\061\001" +
    "\002\000\006\060\156\062\155\001\002\000\062\011\104" +
    "\012\120\014\075\015\117\016\076\017\111\020\102\021" +
    "\112\022\107\023\113\024\124\025\100\026\103\027\101" +
    "\030\114\031\105\032\077\033\122\037\uffa6\060\uffa6\062" +
    "\uffa6\072\121\073\123\074\115\001\002\000\026\004\063" +
    "\005\070\006\066\007\067\010\071\012\062\026\065\034" +
    "\064\055\073\070\061\001\002\000\004\037\uffd1\001\002" +
    "\000\062\011\104\012\120\014\075\015\117\016\076\017" +
    "\111\020\102\021\112\022\107\023\113\024\124\025\100" +
    "\026\103\027\101\030\114\031\105\032\077\033\122\037" +
    "\uffa7\060\uffa7\062\uffa7\072\121\073\123\074\115\001\002" +
    "\000\056\011\104\012\120\014\075\015\117\016\076\017" +
    "\111\020\102\021\112\022\107\023\113\024\124\025\100" +
    "\026\103\027\101\030\114\031\105\032\077\033\122\037" +
    "\uffcf\072\121\073\123\074\115\001\002\000\004\037\uffad" +
    "\001\002\000\004\037\uffc7\001\002\000\004\037\165\001" +
    "\002\000\004\037\uffac\001\002\000\046\010\uffd6\040\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\064\uffd6\067\uffd6\071\uffd6\077\uffd6\102\uffd6\103\uffd6" +
    "\104\uffd6\106\uffd6\107\uffd6\001\002\000\030\004\063\005" +
    "\070\006\066\007\067\010\071\012\062\026\065\034\064" +
    "\055\073\060\176\070\061\001\002\000\026\004\063\005" +
    "\070\006\066\007\067\010\071\012\062\026\065\034\064" +
    "\055\073\070\061\001\002\000\060\011\104\012\120\014" +
    "\075\015\117\016\076\017\111\020\102\021\112\022\107" +
    "\023\113\024\124\025\100\026\103\027\101\030\114\031" +
    "\105\032\077\033\122\057\171\063\172\072\121\073\123" +
    "\074\115\001\002\000\070\011\uff97\012\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\037\uff97\057\uff97\060\uff97\062\uff97\063\uff97" +
    "\072\uff97\073\uff97\074\uff97\105\uff97\001\002\000\026\004" +
    "\063\005\070\006\066\007\067\010\071\012\062\026\065" +
    "\034\064\055\073\070\061\001\002\000\056\011\104\012" +
    "\120\014\075\015\117\016\076\017\111\020\102\021\112" +
    "\022\107\023\113\024\124\025\100\026\103\027\101\030" +
    "\114\031\105\032\077\033\122\057\174\072\121\073\123" +
    "\074\115\001\002\000\070\011\uff96\012\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\037\uff96\057\uff96\060\uff96\062\uff96\063\uff96" +
    "\072\uff96\073\uff96\074\uff96\105\uff96\001\002\000\006\060" +
    "\177\062\155\001\002\000\070\011\uff98\012\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\037\uff98\057\uff98\060\uff98\062\uff98\063" +
    "\uff98\072\uff98\073\uff98\074\uff98\105\uff98\001\002\000\070" +
    "\011\uff99\012\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\037\uff99\057" +
    "\uff99\060\uff99\062\uff99\063\uff99\072\uff99\073\uff99\074\uff99" +
    "\105\uff99\001\002\000\070\011\uff9a\012\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\101\030\114\031\105\032" +
    "\077\033\122\037\uff9a\057\uff9a\060\uff9a\062\uff9a\063\uff9a" +
    "\072\uff9a\073\uff9a\074\uff9a\105\uff9a\001\002\000\070\011" +
    "\uff9b\012\uff9b\014\075\015\117\016\076\017\111\020\102" +
    "\021\112\022\107\023\113\024\124\025\100\026\103\027" +
    "\101\030\114\031\105\032\077\033\122\037\uff9b\057\uff9b" +
    "\060\uff9b\062\uff9b\063\uff9b\072\121\073\123\074\115\105" +
    "\uff9b\001\002\000\050\010\uffde\040\uffde\041\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\064\uffde\067" +
    "\uffde\071\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde" +
    "\107\uffde\110\uffde\001\002\000\004\037\uffa9\001\002\000" +
    "\004\037\uffa8\001\002\000\004\037\ufff5\001\002\000\004" +
    "\037\207\001\002\000\050\010\uffdf\040\uffdf\041\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\064\uffdf" +
    "\067\uffdf\071\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf\103" +
    "\uffdf\107\uffdf\110\uffdf\001\002\000\026\004\063\005\070" +
    "\006\066\007\067\010\071\012\062\026\065\034\064\055" +
    "\073\070\061\001\002\000\056\011\104\012\120\014\075" +
    "\015\117\016\076\017\111\020\102\021\112\022\107\023" +
    "\113\024\124\025\100\026\103\027\101\030\114\031\105" +
    "\032\077\033\122\060\212\072\121\073\123\074\115\001" +
    "\002\000\004\037\uffdc\001\002\000\004\010\216\001\002" +
    "\000\026\004\063\005\070\006\066\007\067\010\071\012" +
    "\062\026\065\034\064\055\073\070\061\001\002\000\006" +
    "\037\uffb2\062\155\001\002\000\010\037\uffea\062\uffea\111" +
    "\uffea\001\002\000\056\011\104\012\120\014\075\015\117" +
    "\016\076\017\111\020\102\021\112\022\107\023\113\024" +
    "\124\025\100\026\103\027\101\030\114\031\105\032\077" +
    "\033\122\063\220\072\121\073\123\074\115\001\002\000" +
    "\034\010\uffce\047\uffce\050\uffce\051\uffce\052\uffce\064\uffce" +
    "\067\uffce\071\uffce\077\uffce\102\uffce\103\uffce\107\uffce\110" +
    "\uffce\001\002\000\034\010\045\047\004\050\020\051\021" +
    "\052\005\064\044\067\013\071\052\077\047\102\043\103" +
    "\041\107\055\110\016\001\002\000\044\010\045\040\uffcd" +
    "\041\uffcd\047\004\050\020\051\021\052\005\064\044\067" +
    "\013\071\052\077\047\100\uffcd\101\uffcd\102\043\103\041" +
    "\107\055\110\016\001\002\000\012\040\uffbd\041\uffbd\100" +
    "\uffbd\101\uffbd\001\002\000\006\040\240\041\237\001\002" +
    "\000\012\040\uffc0\041\uffc0\100\226\101\227\001\002\000" +
    "\004\063\234\001\002\000\026\004\063\005\070\006\066" +
    "\007\067\010\071\012\062\026\065\034\064\055\073\070" +
    "\061\001\002\000\056\011\104\012\120\014\075\015\117" +
    "\016\076\017\111\020\102\021\112\022\107\023\113\024" +
    "\124\025\100\026\103\027\101\030\114\031\105\032\077" +
    "\033\122\063\231\072\121\073\123\074\115\001\002\000" +
    "\034\010\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\064\uffbf" +
    "\067\uffbf\071\uffbf\077\uffbf\102\uffbf\103\uffbf\107\uffbf\110" +
    "\uffbf\001\002\000\034\010\045\047\004\050\020\051\021" +
    "\052\005\064\044\067\013\071\052\077\047\102\043\103" +
    "\041\107\055\110\016\001\002\000\044\010\045\040\uffbe" +
    "\041\uffbe\047\004\050\020\051\021\052\005\064\044\067" +
    "\013\071\052\077\047\100\uffbe\101\uffbe\102\043\103\041" +
    "\107\055\110\016\001\002\000\034\010\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\064\uffc2\067\uffc2\071\uffc2\077\uffc2" +
    "\102\uffc2\103\uffc2\107\uffc2\110\uffc2\001\002\000\034\010" +
    "\045\047\004\050\020\051\021\052\005\064\044\067\013" +
    "\071\052\077\047\102\043\103\041\107\055\110\016\001" +
    "\002\000\040\010\045\040\uffc1\041\uffc1\047\004\050\020" +
    "\051\021\052\005\064\044\067\013\071\052\077\047\102" +
    "\043\103\041\107\055\110\016\001\002\000\004\037\uffb0" +
    "\001\002\000\004\037\uffb1\001\002\000\004\037\uffcc\001" +
    "\002\000\026\004\063\005\070\006\066\007\067\010\071" +
    "\012\062\026\065\034\064\055\073\070\061\001\002\000" +
    "\006\060\244\062\155\001\002\000\004\037\uffd9\001\002" +
    "\000\056\011\104\012\120\014\075\015\117\016\076\017" +
    "\111\020\102\021\112\022\107\023\113\024\124\025\100" +
    "\026\103\027\101\030\114\031\105\032\077\033\122\037" +
    "\uffd7\072\121\073\123\074\115\001\002\000\056\011\104" +
    "\012\120\014\075\015\117\016\076\017\111\020\102\021" +
    "\112\022\107\023\113\024\124\025\100\026\103\027\101" +
    "\030\114\031\105\032\077\033\122\063\247\072\121\073" +
    "\123\074\115\001\002\000\032\010\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\064\uffcb\067\uffcb\071\uffcb\077\uffcb\102" +
    "\uffcb\103\uffcb\107\uffcb\001\002\000\032\010\140\047\004" +
    "\050\020\051\021\052\005\064\137\067\013\071\143\077" +
    "\047\102\043\103\041\107\055\001\002\000\036\010\140" +
    "\040\uffca\042\uffca\047\004\050\020\051\021\052\005\064" +
    "\137\067\013\071\143\077\047\102\043\103\041\107\055" +
    "\001\002\000\006\040\255\042\253\001\002\000\004\037" +
    "\uffae\001\002\000\004\037\uffc9\001\002\000\004\037\uffaf" +
    "\001\002\000\032\010\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\064\uffc6\067\uffc6\071\uffc6\077\uffc6\102\uffc6\103\uffc6" +
    "\107\uffc6\001\002\000\006\104\262\106\260\001\002\000" +
    "\004\063\306\001\002\000\006\040\305\044\303\001\002" +
    "\000\026\004\063\005\070\006\066\007\067\010\071\012" +
    "\062\026\065\034\064\055\073\070\061\001\002\000\012" +
    "\040\uffb8\044\uffb8\104\265\106\264\001\002\000\004\063" +
    "\273\001\002\000\026\004\063\005\070\006\066\007\067" +
    "\010\071\012\062\026\065\034\064\055\073\070\061\001" +
    "\002\000\056\011\104\012\120\014\075\015\117\016\076" +
    "\017\111\020\102\021\112\022\107\023\113\024\124\025" +
    "\100\026\103\027\101\030\114\031\105\032\077\033\122" +
    "\072\121\073\123\074\115\105\267\001\002\000\004\063" +
    "\270\001\002\000\032\010\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\064\uffb7\067\uffb7\071\uffb7\077\uffb7\102\uffb7\103" +
    "\uffb7\107\uffb7\001\002\000\032\010\140\047\004\050\020" +
    "\051\021\052\005\064\137\067\013\071\143\077\047\102" +
    "\043\103\041\107\055\001\002\000\042\010\140\040\uffb6" +
    "\044\uffb6\047\004\050\020\051\021\052\005\064\137\067" +
    "\013\071\143\077\047\102\043\103\041\104\uffb6\106\uffb6" +
    "\107\055\001\002\000\032\010\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\064\uffba\067\uffba\071\uffba\077\uffba\102\uffba" +
    "\103\uffba\107\uffba\001\002\000\032\010\140\047\004\050" +
    "\020\051\021\052\005\064\137\067\013\071\143\077\047" +
    "\102\043\103\041\107\055\001\002\000\036\010\140\040" +
    "\uffb9\044\uffb9\047\004\050\020\051\021\052\005\064\137" +
    "\067\013\071\143\077\047\102\043\103\041\107\055\001" +
    "\002\000\056\011\104\012\120\014\075\015\117\016\076" +
    "\017\111\020\102\021\112\022\107\023\113\024\124\025" +
    "\100\026\103\027\101\030\114\031\105\032\077\033\122" +
    "\072\121\073\123\074\115\105\277\001\002\000\004\063" +
    "\300\001\002\000\032\010\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\064\uffb5\067\uffb5\071\uffb5\077\uffb5\102\uffb5\103" +
    "\uffb5\107\uffb5\001\002\000\032\010\140\047\004\050\020" +
    "\051\021\052\005\064\137\067\013\071\143\077\047\102" +
    "\043\103\041\107\055\001\002\000\042\010\140\040\uffb4" +
    "\044\uffb4\047\004\050\020\051\021\052\005\064\137\067" +
    "\013\071\143\077\047\102\043\103\041\104\uffb4\106\uffb4" +
    "\107\055\001\002\000\004\037\uffaa\001\002\000\004\037" +
    "\uffc3\001\002\000\004\037\uffab\001\002\000\032\010\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\064\uffbc\067\uffbc\071" +
    "\uffbc\077\uffbc\102\uffbc\103\uffbc\107\uffbc\001\002\000\032" +
    "\010\140\047\004\050\020\051\021\052\005\064\137\067" +
    "\013\071\143\077\047\102\043\103\041\107\055\001\002" +
    "\000\036\010\140\040\uffbb\044\uffbb\047\004\050\020\051" +
    "\021\052\005\064\137\067\013\071\143\077\047\102\043" +
    "\103\041\107\055\001\002\000\032\010\140\047\004\050" +
    "\020\051\021\052\005\064\137\067\013\071\143\077\047" +
    "\102\043\103\041\107\055\001\002\000\036\010\140\047" +
    "\004\050\020\051\021\052\005\064\137\067\013\071\143" +
    "\077\047\102\043\103\041\104\262\106\260\107\055\001" +
    "\002\000\006\040\uffc5\044\uffc5\001\002\000\006\040\305" +
    "\044\303\001\002\000\004\037\uffc4\001\002\000\006\010" +
    "\027\066\026\001\002\000\006\060\ufff2\062\ufff2\001\002" +
    "\000\012\047\004\050\020\051\021\052\005\001\002\000" +
    "\006\060\uffef\062\uffef\001\002\000\004\075\323\001\002" +
    "\000\012\047\004\050\020\051\021\052\005\001\002\000" +
    "\006\060\ufff0\062\ufff0\001\002\000\010\037\uffeb\062\213" +
    "\111\330\001\002\000\010\037\uffe9\062\uffe9\111\uffe9\001" +
    "\002\000\004\037\uffec\001\002\000\026\004\063\005\070" +
    "\006\066\007\067\010\071\012\062\026\065\034\064\055" +
    "\073\070\061\001\002\000\006\037\uffb3\062\155\001\002" +
    "\000\020\036\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\067" +
    "\ufff8\110\ufff8\001\002\000\004\037\uffee\001\002\000\004" +
    "\002\000\001\002\000\004\037\341\001\002\000\004\002" +
    "\uffff\001\002\000\004\037\340\001\002\000\020\036\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\052\ufffa\067\ufffa\110\ufffa\001" +
    "\002\000\020\036\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\067\ufffb\110\ufffb\001\002\000\020\036\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\067\ufff9\110\ufff9\001\002\000\034" +
    "\010\045\047\004\050\020\051\021\052\005\064\044\067" +
    "\013\071\052\077\047\102\043\103\041\107\055\110\016" +
    "\001\002\000\036\010\045\046\ufffd\047\004\050\020\051" +
    "\021\052\005\064\044\067\013\071\052\077\047\102\043" +
    "\103\041\107\055\110\016\001\002\000\004\046\346\001" +
    "\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\020\003\011\004\007\005\010\006\006\007" +
    "\016\010\013\021\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\335\006\334\007\016\010\336" +
    "\021\014\001\001\000\002\001\001\000\006\007\332\021" +
    "\014\001\001\000\002\001\001\000\006\012\326\023\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\022\001\001\000\002" +
    "\001\001\000\010\033\030\034\027\035\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\037\001\001\000\024\006\055\007" +
    "\016\010\041\011\050\013\052\021\014\023\047\030\045" +
    "\031\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\245\001\001\000\004\024\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\055\007\016\010\041\011\050\021\014\023\047\030" +
    "\045\031\205\044\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\071\001\001\000\002\001\001\000\004\024\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\115\026\124\027\107\001" +
    "\001\000\004\024\073\001\001\000\010\025\115\026\124" +
    "\027\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\131\001\001\000\004" +
    "\024\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\127\001\001\000\002\001\001\000\004\024\126" +
    "\001\001\000\002\001\001\000\004\024\125\001\001\000" +
    "\010\025\115\026\124\027\107\001\001\000\010\025\115" +
    "\026\124\027\107\001\001\000\010\025\115\026\124\027" +
    "\107\001\001\000\010\025\115\026\124\027\107\001\001" +
    "\000\010\025\115\026\124\027\107\001\001\000\010\025" +
    "\115\026\124\027\107\001\001\000\004\060\134\001\001" +
    "\000\022\006\144\007\016\011\141\014\135\021\014\023" +
    "\047\030\140\032\143\001\001\000\022\006\144\007\016" +
    "\011\141\021\014\023\047\030\140\032\162\043\161\001" +
    "\001\000\004\024\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\147" +
    "\001\001\000\010\025\115\026\124\027\107\001\001\000" +
    "\002\001\001\000\006\022\152\024\153\001\001\000\002" +
    "\001\001\000\010\025\115\026\124\027\107\001\001\000" +
    "\004\024\156\001\001\000\002\001\001\000\010\025\115" +
    "\026\124\027\107\001\001\000\010\025\115\026\124\027" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\174\024\153\001\001\000\004\024\167\001\001\000\010" +
    "\025\115\026\124\027\107\001\001\000\002\001\001\000" +
    "\004\024\172\001\001\000\010\025\115\026\124\027\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\115\026\124\027\107" +
    "\001\001\000\010\025\115\026\124\027\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\210\001\001\000\010\025\115\026\124\027\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\214\024" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\115\026\124\027\107\001\001\000\004\054\220\001" +
    "\001\000\024\006\055\007\016\010\041\011\050\013\221" +
    "\021\014\023\047\030\045\031\053\001\001\000\024\006" +
    "\055\007\016\010\041\011\050\021\014\023\047\030\045" +
    "\031\205\055\222\001\001\000\006\017\223\020\224\001" +
    "\001\000\004\040\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\227\001\001\000\010\025\115\026" +
    "\124\027\107\001\001\000\004\064\231\001\001\000\024" +
    "\006\055\007\016\010\041\011\050\013\232\021\014\023" +
    "\047\030\045\031\053\001\001\000\022\006\055\007\016" +
    "\010\041\011\050\021\014\023\047\030\045\031\205\001" +
    "\001\000\004\063\234\001\001\000\024\006\055\007\016" +
    "\010\041\011\050\013\235\021\014\023\047\030\045\031" +
    "\053\001\001\000\022\006\055\007\016\010\041\011\050" +
    "\021\014\023\047\030\045\031\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\242" +
    "\024\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\115\026\124\027\107\001\001\000\010\025\115" +
    "\026\124\027\107\001\001\000\004\056\247\001\001\000" +
    "\022\006\144\007\016\011\141\014\250\021\014\023\047" +
    "\030\140\032\143\001\001\000\022\006\144\007\016\011" +
    "\141\021\014\023\047\030\140\032\162\057\251\001\001" +
    "\000\004\041\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\310\001\001\000\006" +
    "\015\260\016\262\001\001\000\002\001\001\000\004\042" +
    "\303\001\001\000\004\024\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\265\001\001\000\010\025" +
    "\115\026\124\027\107\001\001\000\002\001\001\000\004" +
    "\067\270\001\001\000\022\006\144\007\016\011\141\014" +
    "\271\021\014\023\047\030\140\032\143\001\001\000\020" +
    "\006\144\007\016\011\141\021\014\023\047\030\140\032" +
    "\162\001\001\000\004\066\273\001\001\000\022\006\144" +
    "\007\016\011\141\014\274\021\014\023\047\030\140\032" +
    "\143\001\001\000\020\006\144\007\016\011\141\021\014" +
    "\023\047\030\140\032\162\001\001\000\010\025\115\026" +
    "\124\027\107\001\001\000\002\001\001\000\004\070\300" +
    "\001\001\000\022\006\144\007\016\011\141\014\301\021" +
    "\014\023\047\030\140\032\143\001\001\000\020\006\144" +
    "\007\016\011\141\021\014\023\047\030\140\032\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\306\001\001\000\022\006\144\007\016\011" +
    "\141\014\307\021\014\023\047\030\140\032\143\001\001" +
    "\000\020\006\144\007\016\011\141\021\014\023\047\030" +
    "\140\032\162\001\001\000\022\006\144\007\016\011\141" +
    "\014\311\021\014\023\047\030\140\032\143\001\001\000" +
    "\024\006\144\007\016\011\141\015\312\016\262\021\014" +
    "\023\047\030\140\032\162\001\001\000\004\062\313\001" +
    "\001\000\004\042\314\001\001\000\002\001\001\000\004" +
    "\035\316\001\001\000\002\001\001\000\004\021\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\330\024\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\055\007\016\010\041\011\050\013\343" +
    "\021\014\023\047\030\045\031\053\001\001\000\024\006" +
    "\055\007\016\010\041\011\050\021\014\023\047\030\045" +
    "\031\205\051\344\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public static final Operators operators = new Operators();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


SymTable globalTable = new SymTable();
SymTable mainTable = new SymTable(globalTable);
SymTable currentTable = globalTable;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logical_op ::= XOR 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.XOR); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // logical_op ::= SOR 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.SOR); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logical_op ::= OR 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.OR); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logical_op ::= SAND 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.SAND); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logical_op ::= AND 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.AND); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // relational_op ::= NOEQ 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.NOEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // relational_op ::= DEEQ 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.DEEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // relational_op ::= SHEQ 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.SHEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // relational_op ::= GTE 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.GTE); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // relational_op ::= LTE 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.LTE); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // relational_op ::= GT 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.GT); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // relational_op ::= LT 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.LT); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arithmetic_op ::= POW 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.POW); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arithmetic_op ::= MOD 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.MOD); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arithmetic_op ::= DIVIDE 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.DIVIDE); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arithmetic_op ::= TIMES 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.TIMES); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // arithmetic_op ::= MINUS 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.MINUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // arithmetic_op ::= PLUS 
            {
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(sym.PLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dict_val ::= IDENTIFIER DOUBLEDOT expr 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(2); RESULT.add(id); RESULT.add(e);
              CUP$parser$result = new java_cup.runtime.Symbol(29/*dict_val*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // dict_vals ::= dict_val 
            {
              HashMap RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList v = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new HashMap(); RESULT.put(v.get(0),v.get(1));
              CUP$parser$result = new java_cup.runtime.Symbol(28/*dict_vals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // dict_vals ::= dict_vals COMMA dict_val 
            {
              HashMap RESULT = null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap dv = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList v = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							if (dv.put(v.get(0),v.get(1))!=null)
							    throw new InvalidDictionaryAccess("Entrada doblemente accesada");
							RESULT = dv;
							
              CUP$parser$result = new java_cup.runtime.Symbol(28/*dict_vals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= READ 
            {
              Expression RESULT = null;
		 RESULT = new ReadExp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= expr GTGT expr 
            {
              Expression RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= expr LTLT expr 
            {
              Expression RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= expr PLUSPLUS expr 
            {
              Expression RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET 
            {
              Expression RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= IDENTIFIER LBRACKET expr RBRACKET 
            {
              Expression RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= IDENTIFIER LPAREN RPAREN 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExp(n, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= IDENTIFIER LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(n, el); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= NOEQ expr 
            {
              Expression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryExp(sym.NOEQ, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= MINUS expr 
            {
              Expression RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryExp(sym.UMINUS, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= expr logical_op expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExp(o.intValue(), e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr relational_op expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExp(o.intValue(), e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr arithmetic_op expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExp(o.intValue(), e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = (Expression)e;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= IDENTIFIER 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 SymTable finded = currentTable.containsIdOrDie(n); RESULT = new IdentifierExp(n, finded); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= FALSE 
            {
              Expression RESULT = null;
		 RESULT = new FalseExp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= TRUE 
            {
              Expression RESULT = null;
		 RESULT = new TrueExp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= FLOAT_V 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FloatExp(e.floatValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= INTEGER_V 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IntegerExp(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= CHAR_V 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character e = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CharExp(e.charValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_list ::= expr 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_list ::= expr_list COMMA expr 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = el; el.add(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fed ::= ENDDEF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*fed*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fed ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*fed*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // elcyc ::= ENDCYCLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*elcyc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // elcyc ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*elcyc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rof ::= ENDFOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*rof*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // rof ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*rof*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elihw ::= ENDWHILE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*elihw*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elihw ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*elihw*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fi ::= ENDIF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*fi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fi ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*fi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asig ::= ident_list ASIG expr_list 
            {
              Assignation RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = currentTable.checkMultipleAssignations(il, el); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*asig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dasig ::= ident_list ASIG expr_list 
            {
              Assignation RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new MultipleAssignation(il, el); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*dasig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cycle_on ::= ON expr DO DOUBLEDOT NT$16 code_block_loop 
            {
              ArrayList RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		currentTable = currentTable.getFather();  RESULT = (new ArrayList()); RESULT.add(new CycleCase(cb,e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cycle_on*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$16 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
StaticTypeChecking.checkExpression(e, new BoolType()); currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cycle_on ::= cycle_on ON expr DO DOUBLEDOT NT$15 code_block_loop 
            {
              ArrayList RESULT = null;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList co = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		currentTable = currentTable.getFather();  co.add(new CycleCase(cb,e)); RESULT = co; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cycle_on*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$15 ::= 
            {
              Object RESULT = null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList co = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
StaticTypeChecking.checkExpression(e, new BoolType()); currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cycle_body ::= cycle_on 
            {
              ArrayList RESULT = null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList co = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = co; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cycle_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cycle_body ::= cycle_on DEFAULT DOUBLEDOT NT$14 code_block_loop 
            {
              ArrayList RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList co = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		currentTable = currentTable.getFather();  co.add(new CycleCase(cb,new TrueExp())); RESULT = co; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cycle_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$14 ::= 
            {
              Object RESULT = null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList co = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cycle_body ::= DEFAULT DOUBLEDOT NT$13 code_block_loop 
            {
              ArrayList RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		currentTable = currentTable.getFather();  RESULT = new ArrayList(); RESULT.add(new CycleCase(cb,new TrueExp())); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cycle_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$13 ::= 
            {
              Object RESULT = null;
 currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elif ::= 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList();
              CUP$parser$result = new java_cup.runtime.Symbol(14/*elif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elif ::= elif ELIF expr DOUBLEDOT NT$12 code_block 
            {
              ArrayList RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		currentTable = currentTable.getFather(); el.add(new IfCase(cb,e)); RESULT=el;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*elif*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$12 ::= 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
StaticTypeChecking.checkExpression(e, new BoolType()); currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else ::= elif 
            {
              ArrayList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = el; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // else ::= elif ELSE DOUBLEDOT NT$11 code_block 
            {
              ArrayList RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		for (int i=0; i<=10;++i)
		    System.out.println(((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-i)).value);
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("hola2:"+el);currentTable = currentTable.getFather(); el.add(new IfCase(cb,new TrueExp())); RESULT = el;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$11 ::= 
            {
		for (int i=0; i<=10;++i)
		    System.out.println(((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-i)).value);
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 currentTable = currentTable.newTable();System.out.println("hola1:"+el); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ctrl_struct ::= CYCLE SEMI cycle_body elcyc 
            {
              Instruction RESULT = null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList cd = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Cycle(cd,null);
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ctrl_struct ::= CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc 
            {
              Instruction RESULT = null;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList cd = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Cycle(cd,cb);
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$10 ::= 
            {
              Object RESULT = null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList cd = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
currentTable = currentTable.getFather(); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$9 ::= 
            {
              Object RESULT = null;
 currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ctrl_struct ::= FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof 
            {
              Instruction RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		currentTable = currentTable.getFather(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$8 ::= 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 currentTable = currentTable.newTable(); currentTable.addSymbol(id,new SymValue(e.getType(),false)); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ctrl_struct ::= WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw 
            {
              Instruction RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new While(cb,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
currentTable = currentTable.getFather(); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$6 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
StaticTypeChecking.checkExpression(e, new BoolType()); currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ctrl_struct ::= IF expr DOUBLEDOT NT$4 code_block NT$5 else fi 
            {
              Instruction RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 el.add(0,new IfCase(cb,e)); RESULT = new If(el); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 currentTable = currentTable.getFather(); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
StaticTypeChecking.checkExpression(e, new BoolType()); currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruction_loop ::= RETURN expr 
            {
              Instruction RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*instruction_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruction_loop ::= ctrl_struct 
            {
              Instruction RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = cs; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*instruction_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruction_loop ::= IDENTIFIER LPAREN expr_list RPAREN 
            {
              Instruction RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 currentTable.containsIdOrDie(id); RESULT = new FunctionCall(id, el); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*instruction_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruction_loop ::= const_decl 
            {
              Instruction RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DecInst(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*instruction_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruction_loop ::= PRINT LPAREN expr RPAREN 
            {
              Instruction RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*instruction_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction_loop ::= asig 
            {
              Instruction RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignation a = (Assignation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*instruction_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // code_block_loop ::= instruction_loop SEMI 
            {
              CodeBlock RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CodeBlock(); RESULT.addInst(i);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*code_block_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // code_block_loop ::= code_block_loop instruction_loop SEMI 
            {
              CodeBlock RESULT = null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cb.addInst(i); RESULT = cb;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*code_block_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruction ::= RETURN expr 
            {
              Instruction RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = StaticTypeChecking.checkReturnValue(e, currentTable); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruction ::= ctrl_struct 
            {
              Instruction RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Instruction cs = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = cs; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruction ::= IDENTIFIER LPAREN expr_list RPAREN 
            {
              Instruction RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 currentTable.containsIdOrDie(id); RESULT = new FunctionCall(id, el); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruction ::= def_decl 
            {
              Instruction RESULT = null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declaration dd = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DecInst(dd); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruction ::= const_decl 
            {
              Instruction RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DecInst(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruction ::= PRINT LPAREN expr RPAREN 
            {
              Instruction RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruction ::= asig 
            {
              Instruction RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignation a = (Assignation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // code_block ::= instruction SEMI 
            {
              CodeBlock RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CodeBlock(); RESULT.addInst(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*code_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // code_block ::= code_block instruction SEMI 
            {
              CodeBlock RESULT = null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cb.addInst(i); RESULT = cb;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*code_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dict_type ::= IDENTIFIER DOUBLEDOT type 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(2); RESULT.add(id); RESULT.add(t);
              CUP$parser$result = new java_cup.runtime.Symbol(37/*dict_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dict_types ::= dict_type 
            {
              HashMap RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList dt = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new HashMap(); RESULT.put(dt.get(0),dt.get(1));
              CUP$parser$result = new java_cup.runtime.Symbol(36/*dict_types*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dict_types ::= dict_types COMMA dict_type 
            {
              HashMap RESULT = null;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap dts = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList dt = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						  if (dts.put(dt.get(0),dt.get(1))!=null)
						      throw new InvalidDictionaryDeclaration("Entrada doblemente declarada");
						  RESULT = dts;
						  
              CUP$parser$result = new java_cup.runtime.Symbol(36/*dict_types*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_list ::= type 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new ArrayList(); RESULT.add(t);
              CUP$parser$result = new java_cup.runtime.Symbol(35/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_list ::= type_list COMMA type 
            {
              ArrayList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList tl = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		tl.add(t); RESULT = tl;
              CUP$parser$result = new java_cup.runtime.Symbol(35/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= BOOL 
            {
              Type RESULT = null;
		 RESULT = new BoolType(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= CHAR 
            {
              Type RESULT = null;
		 RESULT = new CharType(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= FLOAT 
            {
              Type RESULT = null;
		 RESULT = new FloatType(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= INTEGER 
            {
              Type RESULT = null;
		 RESULT = new IntType(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ident_list ::= IDENTIFIER 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*ident_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ident_list ::= ident_list COMMA IDENTIFIER 
            {
              ArrayList RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = il; il.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*ident_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decl ::= type ident_list 
            {
              Declaration RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList ids = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		                              if (ids.size() == 1)
						  RESULT = new SingleDeclaration(new ConstantType(t, null), (String)(ids.get(0)), null, false);
					      else
						  RESULT = new MultipleDeclaration(ids, new ConstantType(t, null));
					      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decl ::= type dasig 
            {
              Declaration RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignation a = (Assignation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					      if (a.isSingle())
					          RESULT = new SingleDeclaration(new ConstantType(t, ((SingleAssignation)a).getExpression()), ((SingleAssignation)a).getId(), ((SingleAssignation)a).getExpression(), false);
					      else
					          RESULT = new MultipleDeclaration(((MultipleAssignation)a),t);
					      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // const_decl ::= decl 
            {
              Declaration RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	            	                       SingleDeclaration currentDeclaration;
					       if (d.isSingle()) {
						   currentDeclaration = ((SingleDeclaration)d);
						   // Aqui, una vez agregada la declaracion, se chequea los tipos
						   if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
					       } else {
						   for (int i = 0; i < ((MultipleDeclaration)d).declarations.size(); i++) {
						       currentDeclaration = (SingleDeclaration)((MultipleDeclaration)d).get(i);
						       //((MultipleDeclaration)d).get(i).setType(((ConstantType)(((MultipleDeclaration)d).get(i).getType())).getRealType());
						       if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
						   }
					       }
		                               currentTable.addDeclaration(d); RESULT = d; 
					       
              CUP$parser$result = new java_cup.runtime.Symbol(4/*const_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // const_decl ::= VAR decl 
            {
              Declaration RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					       SingleDeclaration currentDeclaration;
					       if (d.isSingle()) {
						   currentDeclaration = ((SingleDeclaration)d);
						   currentDeclaration.setVariable(true);
						   //currentDeclaration.setType(((ConstantType)(currentDeclaration.getType())).getRealType());
						   // Aqui, una vez agregada la declaracion, se chequea los tipos
						   if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
					       } else {
						   for (int i = 0; i < ((MultipleDeclaration)d).declarations.size(); i++) {
						       currentDeclaration = (SingleDeclaration)((MultipleDeclaration)d).get(i);
						       currentDeclaration.setVariable(true);
						       //((MultipleDeclaration)d).get(i).setType(((ConstantType)(((MultipleDeclaration)d).get(i).getType())).getRealType());
						       if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
						   }
					       }
					       currentTable.addDeclaration(d);
					       RESULT = d;
					       
              CUP$parser$result = new java_cup.runtime.Symbol(4/*const_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arg ::= IDENTIFIER AS type 
            {
              Type RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		                                  RESULT = t;
						  currentTable.addSymbol(id,new SymValue(t,true));
						  
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arg ::= COPY IDENTIFIER AS type 
            {
              Type RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						  RESULT = t;
						  currentTable.addSymbol(id,new SymValue(t,true));
						  
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // args_list2 ::= arg 
            {
              ArrayList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		                                   RESULT = new ArrayList();
						   RESULT.add(a); 
						   
              CUP$parser$result = new java_cup.runtime.Symbol(26/*args_list2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // args_list2 ::= args_list2 COMMA arg 
            {
              ArrayList RESULT = null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList al = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 al.add(a); RESULT = al; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*args_list2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // args_list ::= 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*args_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // args_list ::= args_list2 
            {
              ArrayList RESULT = null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList al = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = al; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*args_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed 
            {
              Declaration RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value != null )
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList al = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		  RESULT = new SingleDeclaration(new FunctionType(al,t,cb),id,null,false);
		  currentTable=currentTable.getFather();
		  cb.setSymTable(currentTable);
		  currentTable.addSymbol(id,new SymValue(new FunctionType(al, t, cb), false));
                 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*def_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList al = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

		     currentTable.addSymbol("return", new SymValue(t,false));
		 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

		  currentTable.checkDoubleDeclaration(id);
		  currentTable = currentTable.newTable();
		 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_list ::= def_decl SEMI 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList(); RESULT.add(d);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_list ::= const_decl SEMI 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList(); RESULT.add(d);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_list ::= decl_list def_decl SEMI 
            {
              ArrayList RESULT = null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList ds = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ds; RESULT.add(d);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_list ::= decl_list const_decl SEMI 
            {
              ArrayList RESULT = null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList ds = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ds; RESULT.add(d);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= MAIN NT$0 code_block NT$1 ENDMAIN 
            {
              Main RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Main) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Main) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Main(cb); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT = null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CodeBlock cb = (CodeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 currentTable = currentTable.getFather(); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
 currentTable = currentTable.newTable(); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decl_list main 
            {
              Program RESULT = null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList ds = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Main m = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Program(currentTable, m, ds); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= main 
            {
              Program RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Main m = (Main)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Program(currentTable, m);     
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

