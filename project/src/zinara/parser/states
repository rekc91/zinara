Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "RBRACET" was declared but never used
Warning: Terminal "LBRACET" was declared but never used
Warning: Terminal "STRING_V" was declared but never used
Warning: Terminal "STRING" was declared but never used
Warning: Terminal "UMINUS" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
*** Production "dict_val ::= IDENTIFIER DOUBLEDOT expr " never reduced
*** Production "dict_vals ::= dict_val " never reduced
*** Production "dict_vals ::= dict_vals COMMA dict_val " never reduced
*** Production "dict_type ::= IDENTIFIER DOUBLEDOT type " never reduced
*** Production "dict_types ::= dict_type " never reduced
*** Production "dict_types ::= dict_types COMMA dict_type " never reduced
*** Production "type_list ::= type " never reduced
*** Production "type_list ::= type_list COMMA type " never reduced
Writing parser...
===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [const_decl ::= (*) decl , {SEMI }]
  [decl_list ::= (*) const_decl SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
  [main ::= (*) MAIN NT$0 code_block NT$1 ENDMAIN , {EOF }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [program ::= (*) decl_list main , {EOF }]
  [decl ::= (*) type ident_list , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [decl_list ::= (*) decl_list def_decl SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [$START ::= (*) program EOF , {EOF }]
  [decl ::= (*) type dasig , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl_list ::= (*) def_decl SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
  [decl_list ::= (*) decl_list const_decl SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [program ::= (*) main , {EOF }]
}
transition on CHAR to state [14]
transition on FLOAT to state [13]
transition on decl to state [12]
transition on DEF to state [11]
transition on type to state [10]
transition on def_decl to state [9]
transition on VAR to state [8]
transition on program to state [7]
transition on decl_list to state [6]
transition on main to state [5]
transition on const_decl to state [4]
transition on MAIN to state [3]
transition on BOOL to state [2]
transition on INTEGER to state [1]

-------------------
lalr_state [1]: {
  [type ::= INTEGER (*) , {IDENTIFIER GT RPAREN COMMA }]
}

-------------------
lalr_state [2]: {
  [type ::= BOOL (*) , {IDENTIFIER GT RPAREN COMMA }]
}

-------------------
lalr_state [3]: {
  [main ::= MAIN (*) NT$0 code_block NT$1 ENDMAIN , {EOF }]
  [NT$0 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
}
transition on NT$0 to state [224]

-------------------
lalr_state [4]: {
  [decl_list ::= const_decl (*) SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}
transition on SEMI to state [223]

-------------------
lalr_state [5]: {
  [program ::= main (*) , {EOF }]
}

-------------------
lalr_state [6]: {
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [program ::= decl_list (*) main , {EOF }]
  [main ::= (*) MAIN NT$0 code_block NT$1 ENDMAIN , {EOF }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [decl ::= (*) type ident_list , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [decl_list ::= decl_list (*) def_decl SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [decl ::= (*) type dasig , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl_list ::= decl_list (*) const_decl SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
}
transition on CHAR to state [14]
transition on FLOAT to state [13]
transition on decl to state [12]
transition on DEF to state [11]
transition on type to state [10]
transition on def_decl to state [220]
transition on VAR to state [8]
transition on main to state [219]
transition on const_decl to state [218]
transition on MAIN to state [3]
transition on BOOL to state [2]
transition on INTEGER to state [1]

-------------------
lalr_state [7]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [217]

-------------------
lalr_state [8]: {
  [type ::= (*) CHAR , {IDENTIFIER }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [decl ::= (*) type ident_list , {SEMI }]
  [const_decl ::= VAR (*) decl , {SEMI }]
}
transition on CHAR to state [14]
transition on FLOAT to state [13]
transition on BOOL to state [2]
transition on type to state [10]
transition on decl to state [216]
transition on INTEGER to state [1]

-------------------
lalr_state [9]: {
  [decl_list ::= def_decl (*) SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}
transition on SEMI to state [215]

-------------------
lalr_state [10]: {
  [ident_list ::= (*) IDENTIFIER , {SEMI COMMA ASIG }]
  [decl ::= type (*) dasig , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {SEMI COMMA ASIG }]
  [dasig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [decl ::= type (*) ident_list , {SEMI }]
}
transition on dasig to state [212]
transition on IDENTIFIER to state [211]
transition on ident_list to state [210]

-------------------
lalr_state [11]: {
  [def_decl ::= DEF (*) IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on IDENTIFIER to state [15]

-------------------
lalr_state [12]: {
  [const_decl ::= decl (*) , {SEMI }]
}

-------------------
lalr_state [13]: {
  [type ::= FLOAT (*) , {IDENTIFIER GT RPAREN COMMA }]
}

-------------------
lalr_state [14]: {
  [type ::= CHAR (*) , {IDENTIFIER GT RPAREN COMMA }]
}

-------------------
lalr_state [15]: {
  [NT$2 ::= (*) , {LPAREN }]
  [def_decl ::= DEF IDENTIFIER (*) NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on NT$2 to state [16]

-------------------
lalr_state [16]: {
  [def_decl ::= DEF IDENTIFIER NT$2 (*) LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on LPAREN to state [17]

-------------------
lalr_state [17]: {
  [args_list2 ::= (*) arg , {RPAREN COMMA }]
  [args_list ::= (*) args_list2 , {RPAREN }]
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN (*) args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [arg ::= (*) IDENTIFIER AS type , {RPAREN COMMA }]
  [args_list2 ::= (*) args_list2 COMMA arg , {RPAREN COMMA }]
  [arg ::= (*) COPY IDENTIFIER AS type , {RPAREN COMMA }]
  [args_list ::= (*) , {RPAREN }]
}
transition on args_list to state [22]
transition on args_list2 to state [21]
transition on IDENTIFIER to state [20]
transition on COPY to state [19]
transition on arg to state [18]

-------------------
lalr_state [18]: {
  [args_list2 ::= arg (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [19]: {
  [arg ::= COPY (*) IDENTIFIER AS type , {RPAREN COMMA }]
}
transition on IDENTIFIER to state [207]

-------------------
lalr_state [20]: {
  [arg ::= IDENTIFIER (*) AS type , {RPAREN COMMA }]
}
transition on AS to state [205]

-------------------
lalr_state [21]: {
  [args_list ::= args_list2 (*) , {RPAREN }]
  [args_list2 ::= args_list2 (*) COMMA arg , {RPAREN COMMA }]
}
transition on COMMA to state [203]

-------------------
lalr_state [22]: {
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list (*) RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on RPAREN to state [23]

-------------------
lalr_state [23]: {
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN (*) RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on RETURNS to state [24]

-------------------
lalr_state [24]: {
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS (*) LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on LT to state [25]

-------------------
lalr_state [25]: {
  [type ::= (*) CHAR , {GT }]
  [type ::= (*) FLOAT , {GT }]
  [type ::= (*) BOOL , {GT }]
  [type ::= (*) INTEGER , {GT }]
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT (*) type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on CHAR to state [14]
transition on FLOAT to state [13]
transition on BOOL to state [2]
transition on type to state [26]
transition on INTEGER to state [1]

-------------------
lalr_state [26]: {
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type (*) GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on GT to state [27]

-------------------
lalr_state [27]: {
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT (*) DOUBLEDOT NT$3 code_block fed , {SEMI }]
}
transition on DOUBLEDOT to state [28]

-------------------
lalr_state [28]: {
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT (*) NT$3 code_block fed , {SEMI }]
  [NT$3 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
}
transition on NT$3 to state [29]

-------------------
lalr_state [29]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [code_block ::= (*) instruction SEMI , {IDENTIFIER END ENDDEF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 (*) code_block fed , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= (*) code_block instruction SEMI , {IDENTIFIER END ENDDEF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [41]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on code_block to state [40]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on def_decl to state [31]
transition on CYCLE to state [30]

-------------------
lalr_state [30]: {
  [ctrl_struct ::= CYCLE (*) SEMI cycle_body elcyc , {SEMI }]
  [ctrl_struct ::= CYCLE (*) DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
}
transition on SEMI to state [172]
transition on DOUBLEDOT to state [171]

-------------------
lalr_state [31]: {
  [instruction ::= def_decl (*) , {SEMI }]
}

-------------------
lalr_state [32]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [ctrl_struct ::= WHILE (*) expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [163]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [33]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [instruction ::= RETURN (*) expr , {SEMI }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [162]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [34]: {
  [ident_list ::= IDENTIFIER (*) , {COMMA ASIG }]
  [instruction ::= IDENTIFIER (*) LPAREN expr_list RPAREN , {SEMI }]
}
transition on LPAREN to state [159]

-------------------
lalr_state [35]: {
  [instruction ::= ctrl_struct (*) , {SEMI }]
}

-------------------
lalr_state [36]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [ctrl_struct ::= IF (*) expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [140]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [37]: {
  [asig ::= ident_list (*) ASIG expr_list , {SEMI }]
  [ident_list ::= ident_list (*) COMMA IDENTIFIER , {COMMA ASIG }]
}
transition on ASIG to state [137]
transition on COMMA to state [136]

-------------------
lalr_state [38]: {
  [instruction ::= asig (*) , {SEMI }]
}

-------------------
lalr_state [39]: {
  [instruction ::= PRINT (*) LPAREN expr RPAREN , {SEMI }]
}
transition on LPAREN to state [133]

-------------------
lalr_state [40]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [fed ::= (*) END , {SEMI }]
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block (*) fed , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= code_block (*) instruction SEMI , {IDENTIFIER END ENDDEF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
  [fed ::= (*) ENDDEF , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on instruction to state [131]
transition on BOOL to state [2]
transition on PRINT to state [39]
transition on fed to state [130]
transition on ENDDEF to state [129]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on END to state [128]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on def_decl to state [31]
transition on CYCLE to state [30]

-------------------
lalr_state [41]: {
  [code_block ::= instruction (*) SEMI , {IDENTIFIER END ENDIF ENDDEF ENDMAIN INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
}
transition on SEMI to state [127]

-------------------
lalr_state [42]: {
  [ctrl_struct ::= FOR (*) IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
}
transition on IDENTIFIER to state [44]

-------------------
lalr_state [43]: {
  [instruction ::= const_decl (*) , {SEMI }]
}

-------------------
lalr_state [44]: {
  [ctrl_struct ::= FOR IDENTIFIER (*) IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
}
transition on IN to state [45]

-------------------
lalr_state [45]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [ctrl_struct ::= FOR IDENTIFIER IN (*) expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [55]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [46]: {
  [expr ::= READ (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [47]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= MINUS (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [126]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [48]: {
  [expr ::= INTEGER_V (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [49]: {
  [expr ::= CHAR_V (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [50]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= NOEQ (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [125]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [51]: {
  [expr ::= TRUE (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [52]: {
  [expr ::= FALSE (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [53]: {
  [expr ::= FLOAT_V (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [54]: {
  [expr ::= IDENTIFIER (*) LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= IDENTIFIER (*) LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= IDENTIFIER (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= IDENTIFIER (*) LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= IDENTIFIER (*) LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LBRACKET to state [116]
transition on LPAREN to state [115]

-------------------
lalr_state [55]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [ctrl_struct ::= FOR IDENTIFIER IN expr (*) DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on DOUBLEDOT to state [89]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [56]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= LPAREN (*) expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [57]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [57]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= LPAREN expr (*) RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on RPAREN to state [67]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [58]: {
  [arithmetic_op ::= TIMES (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [59]: {
  [arithmetic_op ::= MOD (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [60]: {
  [logical_op ::= SOR (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [61]: {
  [relational_op ::= DEEQ (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [62]: {
  [logical_op ::= AND (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [63]: {
  [relational_op ::= LT (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [64]: {
  [relational_op ::= NOEQ (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [65]: {
  [arithmetic_op ::= PLUS (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [66]: {
  [logical_op ::= OR (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [67]: {
  [expr ::= LPAREN expr RPAREN (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [68]: {
  [relational_op ::= LTE (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [69]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr logical_op (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [88]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [70]: {
  [arithmetic_op ::= POW (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [71]: {
  [relational_op ::= GT (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [72]: {
  [relational_op ::= GTE (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [73]: {
  [logical_op ::= SAND (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [74]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr GTGT (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [87]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [75]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr arithmetic_op (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [86]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [76]: {
  [arithmetic_op ::= DIVIDE (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [77]: {
  [arithmetic_op ::= MINUS (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [78]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr PLUSPLUS (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [85]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [79]: {
  [logical_op ::= XOR (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [80]: {
  [expr ::= expr LTLT (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [84]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [81]: {
  [relational_op ::= SHEQ (*) , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
}

-------------------
lalr_state [82]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr relational_op (*) expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [83]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [83]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr relational_op expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [84]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr LTLT expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [85]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr PLUSPLUS expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [86]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr arithmetic_op expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [87]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr GTGT expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [88]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr logical_op expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [89]: {
  [NT$8 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [ctrl_struct ::= FOR IDENTIFIER IN expr DOUBLEDOT (*) NT$8 code_block_loop rof , {SEMI }]
}
transition on NT$8 to state [90]

-------------------
lalr_state [90]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [ctrl_struct ::= FOR IDENTIFIER IN expr DOUBLEDOT NT$8 (*) code_block_loop rof , {SEMI }]
  [code_block_loop ::= (*) code_block_loop instruction_loop SEMI , {IDENTIFIER END ENDFOR INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block_loop ::= (*) instruction_loop SEMI , {IDENTIFIER END ENDFOR INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [97]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on code_block_loop to state [91]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [91]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [ctrl_struct ::= FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop (*) rof , {SEMI }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= code_block_loop (*) instruction_loop SEMI , {IDENTIFIER END ENDFOR INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [rof ::= (*) ENDFOR , {SEMI }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [rof ::= (*) END , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on ENDFOR to state [113]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [112]
transition on PRINT to state [96]
transition on rof to state [111]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on END to state [110]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [92]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [instruction_loop ::= RETURN (*) expr , {SEMI }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [109]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [93]: {
  [ident_list ::= IDENTIFIER (*) , {COMMA ASIG }]
  [instruction_loop ::= IDENTIFIER (*) LPAREN expr_list RPAREN , {SEMI }]
}
transition on LPAREN to state [103]

-------------------
lalr_state [94]: {
  [instruction_loop ::= ctrl_struct (*) , {SEMI }]
}

-------------------
lalr_state [95]: {
  [instruction_loop ::= asig (*) , {SEMI }]
}

-------------------
lalr_state [96]: {
  [instruction_loop ::= PRINT (*) LPAREN expr RPAREN , {SEMI }]
}
transition on LPAREN to state [100]

-------------------
lalr_state [97]: {
  [code_block_loop ::= instruction_loop (*) SEMI , {IDENTIFIER END ENDWHILE ENDFOR ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
}
transition on SEMI to state [99]

-------------------
lalr_state [98]: {
  [instruction_loop ::= const_decl (*) , {SEMI }]
}

-------------------
lalr_state [99]: {
  [code_block_loop ::= instruction_loop SEMI (*) , {IDENTIFIER END ENDWHILE ENDFOR ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
}

-------------------
lalr_state [100]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [instruction_loop ::= PRINT LPAREN (*) expr RPAREN , {SEMI }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [101]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [101]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [instruction_loop ::= PRINT LPAREN expr (*) RPAREN , {SEMI }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on RPAREN to state [102]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [102]: {
  [instruction_loop ::= PRINT LPAREN expr RPAREN (*) , {SEMI }]
}

-------------------
lalr_state [103]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [instruction_loop ::= IDENTIFIER LPAREN (*) expr_list RPAREN , {SEMI }]
  [expr_list ::= (*) expr_list COMMA expr , {RPAREN COMMA }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr , {RPAREN COMMA }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [105]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on expr_list to state [104]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [104]: {
  [expr_list ::= expr_list (*) COMMA expr , {RPAREN COMMA }]
  [instruction_loop ::= IDENTIFIER LPAREN expr_list (*) RPAREN , {SEMI }]
}
transition on RPAREN to state [107]
transition on COMMA to state [106]

-------------------
lalr_state [105]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr_list ::= expr (*) , {SEMI RPAREN COMMA }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [106]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= expr_list COMMA (*) expr , {SEMI RPAREN COMMA }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [108]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [107]: {
  [instruction_loop ::= IDENTIFIER LPAREN expr_list RPAREN (*) , {SEMI }]
}

-------------------
lalr_state [108]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr_list ::= expr_list COMMA expr (*) , {SEMI RPAREN COMMA }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RPAREN COMMA PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [109]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [instruction_loop ::= RETURN expr (*) , {SEMI }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [110]: {
  [rof ::= END (*) , {SEMI }]
}

-------------------
lalr_state [111]: {
  [ctrl_struct ::= FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof (*) , {SEMI }]
}

-------------------
lalr_state [112]: {
  [code_block_loop ::= code_block_loop instruction_loop (*) SEMI , {IDENTIFIER END ENDWHILE ENDFOR ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
}
transition on SEMI to state [114]

-------------------
lalr_state [113]: {
  [rof ::= ENDFOR (*) , {SEMI }]
}

-------------------
lalr_state [114]: {
  [code_block_loop ::= code_block_loop instruction_loop SEMI (*) , {IDENTIFIER END ENDWHILE ENDFOR ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
}

-------------------
lalr_state [115]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr_list COMMA expr , {RPAREN COMMA }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= IDENTIFIER LPAREN (*) RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr , {RPAREN COMMA }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= IDENTIFIER LPAREN (*) expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [105]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on RPAREN to state [123]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on expr_list to state [122]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [116]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= IDENTIFIER LBRACKET (*) expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= IDENTIFIER LBRACKET (*) expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [117]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [117]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= IDENTIFIER LBRACKET expr (*) DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= IDENTIFIER LBRACKET expr (*) RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on DOUBLEDOT to state [119]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on RBRACKET to state [118]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [118]: {
  [expr ::= IDENTIFIER LBRACKET expr RBRACKET (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [119]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= IDENTIFIER LBRACKET expr DOUBLEDOT (*) expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [120]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [120]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= IDENTIFIER LBRACKET expr DOUBLEDOT expr (*) RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RBRACKET PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on RBRACKET to state [121]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [121]: {
  [expr ::= IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [122]: {
  [expr_list ::= expr_list (*) COMMA expr , {RPAREN COMMA }]
  [expr ::= IDENTIFIER LPAREN expr_list (*) RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on RPAREN to state [124]
transition on COMMA to state [106]

-------------------
lalr_state [123]: {
  [expr ::= IDENTIFIER LPAREN RPAREN (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [124]: {
  [expr ::= IDENTIFIER LPAREN expr_list RPAREN (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}

-------------------
lalr_state [125]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= NOEQ expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [126]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= MINUS expr (*) , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI RBRACKET RPAREN COMMA DOUBLEDOT PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [127]: {
  [code_block ::= instruction SEMI (*) , {IDENTIFIER END ENDIF ENDDEF ENDMAIN INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
}

-------------------
lalr_state [128]: {
  [fed ::= END (*) , {SEMI }]
}

-------------------
lalr_state [129]: {
  [fed ::= ENDDEF (*) , {SEMI }]
}

-------------------
lalr_state [130]: {
  [def_decl ::= DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed (*) , {SEMI }]
}

-------------------
lalr_state [131]: {
  [code_block ::= code_block instruction (*) SEMI , {IDENTIFIER END ENDIF ENDDEF ENDMAIN INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
}
transition on SEMI to state [132]

-------------------
lalr_state [132]: {
  [code_block ::= code_block instruction SEMI (*) , {IDENTIFIER END ENDIF ENDDEF ENDMAIN INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
}

-------------------
lalr_state [133]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [instruction ::= PRINT LPAREN (*) expr RPAREN , {SEMI }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [134]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [134]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [instruction ::= PRINT LPAREN expr (*) RPAREN , {SEMI }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on RPAREN to state [135]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [135]: {
  [instruction ::= PRINT LPAREN expr RPAREN (*) , {SEMI }]
}

-------------------
lalr_state [136]: {
  [ident_list ::= ident_list COMMA (*) IDENTIFIER , {SEMI COMMA ASIG }]
}
transition on IDENTIFIER to state [139]

-------------------
lalr_state [137]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr_list COMMA expr , {SEMI COMMA }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr , {SEMI COMMA }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [asig ::= ident_list ASIG (*) expr_list , {SEMI }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [105]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on expr_list to state [138]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [138]: {
  [expr_list ::= expr_list (*) COMMA expr , {SEMI COMMA }]
  [asig ::= ident_list ASIG expr_list (*) , {SEMI }]
}
transition on COMMA to state [106]

-------------------
lalr_state [139]: {
  [ident_list ::= ident_list COMMA IDENTIFIER (*) , {SEMI COMMA ASIG }]
}

-------------------
lalr_state [140]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [ctrl_struct ::= IF expr (*) DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on DOUBLEDOT to state [141]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [141]: {
  [NT$4 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [ctrl_struct ::= IF expr DOUBLEDOT (*) NT$4 code_block NT$5 else fi , {SEMI }]
}
transition on NT$4 to state [142]

-------------------
lalr_state [142]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [code_block ::= (*) instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [ctrl_struct ::= IF expr DOUBLEDOT NT$4 (*) code_block NT$5 else fi , {SEMI }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= (*) code_block instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [41]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on code_block to state [143]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on def_decl to state [31]
transition on CYCLE to state [30]

-------------------
lalr_state [143]: {
  [NT$5 ::= (*) , {END ENDIF ELSE ELIF }]
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [ctrl_struct ::= IF expr DOUBLEDOT NT$4 code_block (*) NT$5 else fi , {SEMI }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= code_block (*) instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [131]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on NT$5 to state [144]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on def_decl to state [31]
transition on CYCLE to state [30]

-------------------
lalr_state [144]: {
  [ctrl_struct ::= IF expr DOUBLEDOT NT$4 code_block NT$5 (*) else fi , {SEMI }]
  [elif ::= (*) , {END ENDIF ELSE ELIF }]
  [else ::= (*) elif , {END ENDIF }]
  [elif ::= (*) elif ELIF expr DOUBLEDOT NT$12 code_block , {END ENDIF ELSE ELIF }]
  [else ::= (*) elif ELSE DOUBLEDOT NT$11 code_block , {END ENDIF }]
}
transition on elif to state [146]
transition on else to state [145]

-------------------
lalr_state [145]: {
  [ctrl_struct ::= IF expr DOUBLEDOT NT$4 code_block NT$5 else (*) fi , {SEMI }]
  [fi ::= (*) ENDIF , {SEMI }]
  [fi ::= (*) END , {SEMI }]
}
transition on fi to state [158]
transition on END to state [157]
transition on ENDIF to state [156]

-------------------
lalr_state [146]: {
  [else ::= elif (*) , {END ENDIF }]
  [elif ::= elif (*) ELIF expr DOUBLEDOT NT$12 code_block , {END ENDIF ELSE ELIF }]
  [else ::= elif (*) ELSE DOUBLEDOT NT$11 code_block , {END ENDIF }]
}
transition on ELIF to state [148]
transition on ELSE to state [147]

-------------------
lalr_state [147]: {
  [else ::= elif ELSE (*) DOUBLEDOT NT$11 code_block , {END ENDIF }]
}
transition on DOUBLEDOT to state [153]

-------------------
lalr_state [148]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [elif ::= elif ELIF (*) expr DOUBLEDOT NT$12 code_block , {END ENDIF ELSE ELIF }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [149]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [149]: {
  [elif ::= elif ELIF expr (*) DOUBLEDOT NT$12 code_block , {END ENDIF ELSE ELIF }]
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on DOUBLEDOT to state [150]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [150]: {
  [elif ::= elif ELIF expr DOUBLEDOT (*) NT$12 code_block , {END ENDIF ELSE ELIF }]
  [NT$12 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
}
transition on NT$12 to state [151]

-------------------
lalr_state [151]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [code_block ::= (*) instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= (*) code_block instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [elif ::= elif ELIF expr DOUBLEDOT NT$12 (*) code_block , {END ENDIF ELSE ELIF }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [41]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on code_block to state [152]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on def_decl to state [31]
transition on CYCLE to state [30]

-------------------
lalr_state [152]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= code_block (*) instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF ELSE ELIF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [elif ::= elif ELIF expr DOUBLEDOT NT$12 code_block (*) , {END ENDIF ELSE ELIF }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [131]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on def_decl to state [31]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [153]: {
  [NT$11 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [else ::= elif ELSE DOUBLEDOT (*) NT$11 code_block , {END ENDIF }]
}
transition on NT$11 to state [154]

-------------------
lalr_state [154]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [code_block ::= (*) instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= (*) code_block instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [else ::= elif ELSE DOUBLEDOT NT$11 (*) code_block , {END ENDIF }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [41]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on code_block to state [155]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on def_decl to state [31]
transition on CYCLE to state [30]

-------------------
lalr_state [155]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= code_block (*) instruction SEMI , {IDENTIFIER END ENDIF INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [else ::= elif ELSE DOUBLEDOT NT$11 code_block (*) , {END ENDIF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [131]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on def_decl to state [31]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [156]: {
  [fi ::= ENDIF (*) , {SEMI }]
}

-------------------
lalr_state [157]: {
  [fi ::= END (*) , {SEMI }]
}

-------------------
lalr_state [158]: {
  [ctrl_struct ::= IF expr DOUBLEDOT NT$4 code_block NT$5 else fi (*) , {SEMI }]
}

-------------------
lalr_state [159]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [instruction ::= IDENTIFIER LPAREN (*) expr_list RPAREN , {SEMI }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr_list COMMA expr , {RPAREN COMMA }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr , {RPAREN COMMA }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR RPAREN COMMA PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [105]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on expr_list to state [160]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [160]: {
  [expr_list ::= expr_list (*) COMMA expr , {RPAREN COMMA }]
  [instruction ::= IDENTIFIER LPAREN expr_list (*) RPAREN , {SEMI }]
}
transition on RPAREN to state [161]
transition on COMMA to state [106]

-------------------
lalr_state [161]: {
  [instruction ::= IDENTIFIER LPAREN expr_list RPAREN (*) , {SEMI }]
}

-------------------
lalr_state [162]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [instruction ::= RETURN expr (*) , {SEMI }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [163]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [ctrl_struct ::= WHILE expr (*) DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR DOUBLEDOT PLUSPLUS LTLT GTGT }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on DOUBLEDOT to state [164]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [164]: {
  [NT$6 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [ctrl_struct ::= WHILE expr DOUBLEDOT (*) NT$6 code_block_loop NT$7 elihw , {SEMI }]
}
transition on NT$6 to state [165]

-------------------
lalr_state [165]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= (*) code_block_loop instruction_loop SEMI , {IDENTIFIER END ENDWHILE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [ctrl_struct ::= WHILE expr DOUBLEDOT NT$6 (*) code_block_loop NT$7 elihw , {SEMI }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block_loop ::= (*) instruction_loop SEMI , {IDENTIFIER END ENDWHILE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [97]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on code_block_loop to state [166]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [166]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [NT$7 ::= (*) , {END ENDWHILE }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= code_block_loop (*) instruction_loop SEMI , {IDENTIFIER END ENDWHILE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [ctrl_struct ::= WHILE expr DOUBLEDOT NT$6 code_block_loop (*) NT$7 elihw , {SEMI }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [112]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on NT$7 to state [167]
transition on CYCLE to state [30]

-------------------
lalr_state [167]: {
  [ctrl_struct ::= WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 (*) elihw , {SEMI }]
  [elihw ::= (*) END , {SEMI }]
  [elihw ::= (*) ENDWHILE , {SEMI }]
}
transition on END to state [170]
transition on elihw to state [169]
transition on ENDWHILE to state [168]

-------------------
lalr_state [168]: {
  [elihw ::= ENDWHILE (*) , {SEMI }]
}

-------------------
lalr_state [169]: {
  [ctrl_struct ::= WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw (*) , {SEMI }]
}

-------------------
lalr_state [170]: {
  [elihw ::= END (*) , {SEMI }]
}

-------------------
lalr_state [171]: {
  [NT$9 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [ctrl_struct ::= CYCLE DOUBLEDOT (*) NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
}
transition on NT$9 to state [198]

-------------------
lalr_state [172]: {
  [ctrl_struct ::= CYCLE SEMI (*) cycle_body elcyc , {SEMI }]
  [cycle_body ::= (*) cycle_on , {END ENDCYCLE }]
  [cycle_body ::= (*) DEFAULT DOUBLEDOT NT$13 code_block_loop , {END ENDCYCLE }]
  [cycle_on ::= (*) cycle_on ON expr DO DOUBLEDOT NT$15 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [cycle_body ::= (*) cycle_on DEFAULT DOUBLEDOT NT$14 code_block_loop , {END ENDCYCLE }]
  [cycle_on ::= (*) ON expr DO DOUBLEDOT NT$16 code_block_loop , {END ENDCYCLE ON DEFAULT }]
}
transition on cycle_on to state [176]
transition on ON to state [175]
transition on cycle_body to state [174]
transition on DEFAULT to state [173]

-------------------
lalr_state [173]: {
  [cycle_body ::= DEFAULT (*) DOUBLEDOT NT$13 code_block_loop , {END ENDCYCLE }]
}
transition on DOUBLEDOT to state [195]

-------------------
lalr_state [174]: {
  [ctrl_struct ::= CYCLE SEMI cycle_body (*) elcyc , {SEMI }]
  [elcyc ::= (*) ENDCYCLE , {SEMI }]
  [elcyc ::= (*) END , {SEMI }]
}
transition on END to state [194]
transition on elcyc to state [193]
transition on ENDCYCLE to state [192]

-------------------
lalr_state [175]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [cycle_on ::= ON (*) expr DO DOUBLEDOT NT$16 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [187]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [176]: {
  [cycle_body ::= cycle_on (*) , {END ENDCYCLE }]
  [cycle_on ::= cycle_on (*) ON expr DO DOUBLEDOT NT$15 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [cycle_body ::= cycle_on (*) DEFAULT DOUBLEDOT NT$14 code_block_loop , {END ENDCYCLE }]
}
transition on ON to state [178]
transition on DEFAULT to state [177]

-------------------
lalr_state [177]: {
  [cycle_body ::= cycle_on DEFAULT (*) DOUBLEDOT NT$14 code_block_loop , {END ENDCYCLE }]
}
transition on DOUBLEDOT to state [184]

-------------------
lalr_state [178]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [cycle_on ::= cycle_on ON (*) expr DO DOUBLEDOT NT$15 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
}
transition on LPAREN to state [56]
transition on expr to state [179]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [179]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [cycle_on ::= cycle_on ON expr (*) DO DOUBLEDOT NT$15 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on DO to state [180]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [180]: {
  [cycle_on ::= cycle_on ON expr DO (*) DOUBLEDOT NT$15 code_block_loop , {END ENDCYCLE ON DEFAULT }]
}
transition on DOUBLEDOT to state [181]

-------------------
lalr_state [181]: {
  [NT$15 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [cycle_on ::= cycle_on ON expr DO DOUBLEDOT (*) NT$15 code_block_loop , {END ENDCYCLE ON DEFAULT }]
}
transition on NT$15 to state [182]

-------------------
lalr_state [182]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [cycle_on ::= cycle_on ON expr DO DOUBLEDOT NT$15 (*) code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= (*) code_block_loop instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block_loop ::= (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [97]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on code_block_loop to state [183]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [183]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [cycle_on ::= cycle_on ON expr DO DOUBLEDOT NT$15 code_block_loop (*) , {END ENDCYCLE ON DEFAULT }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= code_block_loop (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [112]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [184]: {
  [NT$14 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [cycle_body ::= cycle_on DEFAULT DOUBLEDOT (*) NT$14 code_block_loop , {END ENDCYCLE }]
}
transition on NT$14 to state [185]

-------------------
lalr_state [185]: {
  [cycle_body ::= cycle_on DEFAULT DOUBLEDOT NT$14 (*) code_block_loop , {END ENDCYCLE }]
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= (*) code_block_loop instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block_loop ::= (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [97]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on code_block_loop to state [186]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [186]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= code_block_loop (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [cycle_body ::= cycle_on DEFAULT DOUBLEDOT NT$14 code_block_loop (*) , {END ENDCYCLE }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [112]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [187]: {
  [expr ::= expr (*) LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [cycle_on ::= ON expr (*) DO DOUBLEDOT NT$16 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [arithmetic_op ::= (*) MOD , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SAND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) TIMES , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) GT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) NOEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) XOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [expr ::= expr (*) GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) PLUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [arithmetic_op ::= (*) POW , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) SHEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) OR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) DIVIDE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LTE , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) AND , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
  [arithmetic_op ::= (*) MINUS , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) LT , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [relational_op ::= (*) DEEQ , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [logical_op ::= (*) SOR , {INTEGER_V FLOAT_V TRUE FALSE IDENTIFIER MINUS NOEQ CHAR_V LPAREN READ }]
  [expr ::= expr (*) arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR PLUSPLUS LTLT GTGT DO }]
}
transition on relational_op to state [82]
transition on SHEQ to state [81]
transition on LTLT to state [80]
transition on XOR to state [79]
transition on PLUSPLUS to state [78]
transition on MINUS to state [77]
transition on DIVIDE to state [76]
transition on arithmetic_op to state [75]
transition on DO to state [188]
transition on GTGT to state [74]
transition on SAND to state [73]
transition on GTE to state [72]
transition on GT to state [71]
transition on POW to state [70]
transition on logical_op to state [69]
transition on LTE to state [68]
transition on OR to state [66]
transition on PLUS to state [65]
transition on NOEQ to state [64]
transition on LT to state [63]
transition on AND to state [62]
transition on DEEQ to state [61]
transition on SOR to state [60]
transition on MOD to state [59]
transition on TIMES to state [58]

-------------------
lalr_state [188]: {
  [cycle_on ::= ON expr DO (*) DOUBLEDOT NT$16 code_block_loop , {END ENDCYCLE ON DEFAULT }]
}
transition on DOUBLEDOT to state [189]

-------------------
lalr_state [189]: {
  [NT$16 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [cycle_on ::= ON expr DO DOUBLEDOT (*) NT$16 code_block_loop , {END ENDCYCLE ON DEFAULT }]
}
transition on NT$16 to state [190]

-------------------
lalr_state [190]: {
  [cycle_on ::= ON expr DO DOUBLEDOT NT$16 (*) code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= (*) code_block_loop instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block_loop ::= (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [97]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on code_block_loop to state [191]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [191]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= code_block_loop (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [cycle_on ::= ON expr DO DOUBLEDOT NT$16 code_block_loop (*) , {END ENDCYCLE ON DEFAULT }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [112]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [192]: {
  [elcyc ::= ENDCYCLE (*) , {SEMI }]
}

-------------------
lalr_state [193]: {
  [ctrl_struct ::= CYCLE SEMI cycle_body elcyc (*) , {SEMI }]
}

-------------------
lalr_state [194]: {
  [elcyc ::= END (*) , {SEMI }]
}

-------------------
lalr_state [195]: {
  [cycle_body ::= DEFAULT DOUBLEDOT (*) NT$13 code_block_loop , {END ENDCYCLE }]
  [NT$13 ::= (*) , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
}
transition on NT$13 to state [196]

-------------------
lalr_state [196]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [cycle_body ::= DEFAULT DOUBLEDOT NT$13 (*) code_block_loop , {END ENDCYCLE }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= (*) code_block_loop instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block_loop ::= (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [97]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on code_block_loop to state [197]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [197]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [cycle_body ::= DEFAULT DOUBLEDOT NT$13 code_block_loop (*) , {END ENDCYCLE }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= code_block_loop (*) instruction_loop SEMI , {IDENTIFIER END ENDCYCLE INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [112]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [198]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [code_block_loop ::= (*) code_block_loop instruction_loop SEMI , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= CYCLE DOUBLEDOT NT$9 (*) code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block_loop ::= (*) instruction_loop SEMI , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on FOR to state [42]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [97]
transition on PRINT to state [96]
transition on asig to state [95]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on WHILE to state [32]
transition on type to state [10]
transition on code_block_loop to state [199]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [199]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [cycle_body ::= (*) cycle_on DEFAULT DOUBLEDOT NT$14 code_block_loop , {END ENDCYCLE }]
  [cycle_on ::= (*) ON expr DO DOUBLEDOT NT$16 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [instruction_loop ::= (*) asig , {SEMI }]
  [instruction_loop ::= (*) RETURN expr , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [cycle_body ::= (*) DEFAULT DOUBLEDOT NT$13 code_block_loop , {END ENDCYCLE }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [cycle_on ::= (*) cycle_on ON expr DO DOUBLEDOT NT$15 code_block_loop , {END ENDCYCLE ON DEFAULT }]
  [code_block_loop ::= code_block_loop (*) instruction_loop SEMI , {IDENTIFIER INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE ON DEFAULT FOR }]
  [instruction_loop ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [cycle_body ::= (*) cycle_on , {END ENDCYCLE }]
  [ctrl_struct ::= CYCLE DOUBLEDOT NT$9 code_block_loop (*) cycle_body NT$10 elcyc , {SEMI }]
  [instruction_loop ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [instruction_loop ::= (*) ctrl_struct , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction_loop ::= (*) const_decl , {SEMI }]
}
transition on VAR to state [8]
transition on const_decl to state [98]
transition on cycle_on to state [176]
transition on FOR to state [42]
transition on DEFAULT to state [173]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on instruction_loop to state [112]
transition on PRINT to state [96]
transition on asig to state [95]
transition on cycle_body to state [200]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [94]
transition on IDENTIFIER to state [93]
transition on RETURN to state [92]
transition on ON to state [175]
transition on type to state [10]
transition on WHILE to state [32]
transition on CHAR to state [14]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [200]: {
  [NT$10 ::= (*) , {END ENDCYCLE }]
  [ctrl_struct ::= CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body (*) NT$10 elcyc , {SEMI }]
}
transition on NT$10 to state [201]

-------------------
lalr_state [201]: {
  [ctrl_struct ::= CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 (*) elcyc , {SEMI }]
  [elcyc ::= (*) ENDCYCLE , {SEMI }]
  [elcyc ::= (*) END , {SEMI }]
}
transition on END to state [194]
transition on elcyc to state [202]
transition on ENDCYCLE to state [192]

-------------------
lalr_state [202]: {
  [ctrl_struct ::= CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc (*) , {SEMI }]
}

-------------------
lalr_state [203]: {
  [args_list2 ::= args_list2 COMMA (*) arg , {RPAREN COMMA }]
  [arg ::= (*) IDENTIFIER AS type , {RPAREN COMMA }]
  [arg ::= (*) COPY IDENTIFIER AS type , {RPAREN COMMA }]
}
transition on IDENTIFIER to state [20]
transition on COPY to state [19]
transition on arg to state [204]

-------------------
lalr_state [204]: {
  [args_list2 ::= args_list2 COMMA arg (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [205]: {
  [type ::= (*) CHAR , {RPAREN COMMA }]
  [arg ::= IDENTIFIER AS (*) type , {RPAREN COMMA }]
  [type ::= (*) FLOAT , {RPAREN COMMA }]
  [type ::= (*) BOOL , {RPAREN COMMA }]
  [type ::= (*) INTEGER , {RPAREN COMMA }]
}
transition on CHAR to state [14]
transition on FLOAT to state [13]
transition on BOOL to state [2]
transition on type to state [206]
transition on INTEGER to state [1]

-------------------
lalr_state [206]: {
  [arg ::= IDENTIFIER AS type (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [207]: {
  [arg ::= COPY IDENTIFIER (*) AS type , {RPAREN COMMA }]
}
transition on AS to state [208]

-------------------
lalr_state [208]: {
  [type ::= (*) CHAR , {RPAREN COMMA }]
  [type ::= (*) FLOAT , {RPAREN COMMA }]
  [arg ::= COPY IDENTIFIER AS (*) type , {RPAREN COMMA }]
  [type ::= (*) BOOL , {RPAREN COMMA }]
  [type ::= (*) INTEGER , {RPAREN COMMA }]
}
transition on CHAR to state [14]
transition on FLOAT to state [13]
transition on BOOL to state [2]
transition on type to state [209]
transition on INTEGER to state [1]

-------------------
lalr_state [209]: {
  [arg ::= COPY IDENTIFIER AS type (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [210]: {
  [dasig ::= ident_list (*) ASIG expr_list , {SEMI }]
  [ident_list ::= ident_list (*) COMMA IDENTIFIER , {SEMI COMMA ASIG }]
  [decl ::= type ident_list (*) , {SEMI }]
}
transition on ASIG to state [213]
transition on COMMA to state [136]

-------------------
lalr_state [211]: {
  [ident_list ::= IDENTIFIER (*) , {SEMI COMMA ASIG }]
}

-------------------
lalr_state [212]: {
  [decl ::= type dasig (*) , {SEMI }]
}

-------------------
lalr_state [213]: {
  [expr ::= (*) expr arithmetic_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr LTLT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) CHAR_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) MINUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr_list COMMA expr , {SEMI COMMA }]
  [expr ::= (*) TRUE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr relational_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LPAREN RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr GTGT expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [dasig ::= ident_list ASIG (*) expr_list , {SEMI }]
  [expr ::= (*) INTEGER_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) LPAREN expr RPAREN , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) NOEQ expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr PLUSPLUS expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr_list ::= (*) expr , {SEMI COMMA }]
  [expr ::= (*) FALSE , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) expr logical_op expr , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) IDENTIFIER LBRACKET expr RBRACKET , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) READ , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
  [expr ::= (*) FLOAT_V , {PLUS MINUS TIMES DIVIDE MOD POW LT GT LTE GTE SHEQ DEEQ NOEQ AND SAND OR SOR XOR SEMI COMMA PLUSPLUS LTLT GTGT }]
}
transition on LPAREN to state [56]
transition on expr to state [105]
transition on IDENTIFIER to state [54]
transition on FLOAT_V to state [53]
transition on FALSE to state [52]
transition on TRUE to state [51]
transition on expr_list to state [214]
transition on NOEQ to state [50]
transition on CHAR_V to state [49]
transition on INTEGER_V to state [48]
transition on MINUS to state [47]
transition on READ to state [46]

-------------------
lalr_state [214]: {
  [expr_list ::= expr_list (*) COMMA expr , {SEMI COMMA }]
  [dasig ::= ident_list ASIG expr_list (*) , {SEMI }]
}
transition on COMMA to state [106]

-------------------
lalr_state [215]: {
  [decl_list ::= def_decl SEMI (*) , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}

-------------------
lalr_state [216]: {
  [const_decl ::= VAR decl (*) , {SEMI }]
}

-------------------
lalr_state [217]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [218]: {
  [decl_list ::= decl_list const_decl (*) SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}
transition on SEMI to state [222]

-------------------
lalr_state [219]: {
  [program ::= decl_list main (*) , {EOF }]
}

-------------------
lalr_state [220]: {
  [decl_list ::= decl_list def_decl (*) SEMI , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}
transition on SEMI to state [221]

-------------------
lalr_state [221]: {
  [decl_list ::= decl_list def_decl SEMI (*) , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}

-------------------
lalr_state [222]: {
  [decl_list ::= decl_list const_decl SEMI (*) , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}

-------------------
lalr_state [223]: {
  [decl_list ::= const_decl SEMI (*) , {MAIN INTEGER FLOAT CHAR BOOL VAR DEF }]
}

-------------------
lalr_state [224]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [code_block ::= (*) instruction SEMI , {IDENTIFIER ENDMAIN INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= (*) code_block instruction SEMI , {IDENTIFIER ENDMAIN INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [instruction ::= (*) RETURN expr , {SEMI }]
  [main ::= MAIN NT$0 (*) code_block NT$1 ENDMAIN , {EOF }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [41]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on code_block to state [225]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on decl to state [12]
transition on def_decl to state [31]
transition on CYCLE to state [30]

-------------------
lalr_state [225]: {
  [ctrl_struct ::= (*) CYCLE SEMI cycle_body elcyc , {SEMI }]
  [const_decl ::= (*) decl , {SEMI }]
  [type ::= (*) INTEGER , {IDENTIFIER }]
  [instruction ::= (*) IDENTIFIER LPAREN expr_list RPAREN , {SEMI }]
  [ident_list ::= (*) ident_list COMMA IDENTIFIER , {COMMA ASIG }]
  [type ::= (*) BOOL , {IDENTIFIER }]
  [instruction ::= (*) const_decl , {SEMI }]
  [ctrl_struct ::= (*) IF expr DOUBLEDOT NT$4 code_block NT$5 else fi , {SEMI }]
  [ctrl_struct ::= (*) FOR IDENTIFIER IN expr DOUBLEDOT NT$8 code_block_loop rof , {SEMI }]
  [decl ::= (*) type dasig , {SEMI }]
  [type ::= (*) FLOAT , {IDENTIFIER }]
  [instruction ::= (*) asig , {SEMI }]
  [instruction ::= (*) ctrl_struct , {SEMI }]
  [NT$1 ::= (*) , {ENDMAIN }]
  [ctrl_struct ::= (*) WHILE expr DOUBLEDOT NT$6 code_block_loop NT$7 elihw , {SEMI }]
  [ctrl_struct ::= (*) CYCLE DOUBLEDOT NT$9 code_block_loop cycle_body NT$10 elcyc , {SEMI }]
  [const_decl ::= (*) VAR decl , {SEMI }]
  [ident_list ::= (*) IDENTIFIER , {COMMA ASIG }]
  [code_block ::= code_block (*) instruction SEMI , {IDENTIFIER ENDMAIN INTEGER FLOAT CHAR BOOL RETURN VAR PRINT IF WHILE CYCLE FOR DEF }]
  [instruction ::= (*) def_decl , {SEMI }]
  [def_decl ::= (*) DEF IDENTIFIER NT$2 LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT NT$3 code_block fed , {SEMI }]
  [decl ::= (*) type ident_list , {SEMI }]
  [type ::= (*) CHAR , {IDENTIFIER }]
  [asig ::= (*) ident_list ASIG expr_list , {SEMI }]
  [instruction ::= (*) PRINT LPAREN expr RPAREN , {SEMI }]
  [main ::= MAIN NT$0 code_block (*) NT$1 ENDMAIN , {EOF }]
  [instruction ::= (*) RETURN expr , {SEMI }]
}
transition on const_decl to state [43]
transition on VAR to state [8]
transition on FOR to state [42]
transition on instruction to state [131]
transition on INTEGER to state [1]
transition on BOOL to state [2]
transition on PRINT to state [39]
transition on asig to state [38]
transition on DEF to state [11]
transition on ident_list to state [37]
transition on FLOAT to state [13]
transition on IF to state [36]
transition on ctrl_struct to state [35]
transition on NT$1 to state [226]
transition on IDENTIFIER to state [34]
transition on RETURN to state [33]
transition on WHILE to state [32]
transition on type to state [10]
transition on CHAR to state [14]
transition on def_decl to state [31]
transition on decl to state [12]
transition on CYCLE to state [30]

-------------------
lalr_state [226]: {
  [main ::= MAIN NT$0 code_block NT$1 (*) ENDMAIN , {EOF }]
}
transition on ENDMAIN to state [227]

-------------------
lalr_state [227]: {
  [main ::= MAIN NT$0 code_block NT$1 ENDMAIN (*) , {EOF }]
}

-------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 13 warnings
  72 terminals, 55 non-terminals, and 133 productions declared, 
  producing 228 unique parse states.
  5 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.10k)
