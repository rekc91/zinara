package zinara.parser;

import zinara.ast.type.*;
import zinara.ast.expression.*;
import zinara.ast.instructions.*;
import zinara.ast.*;

import java_cup.runtime.*;

parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* Preliminaries to set up and use the scanner.  */

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */

/* Terminals (tokens returned by the scanner). */
terminal INTEGER_V;
terminal FLOAT_V;
terminal TRUE, FALSE;
terminal IDENTIFIER;
terminal PLUS, MINUS, UMINUS, TIMES, DIVIDE, MOD, POW;
terminal LT, GT, LTE, GTE, SHEQ, DEEQ, NOEQ;
terminal AND, SAND, OR, SOR, XOR;

terminal CHAR_V;
terminal MAIN;
terminal SEMI;
terminal END, ENDIF, ENDWHILE, ENDFOR, ENDCYCLE, ENDDEF, ENDMAIN;
terminal INTEGER, FLOAT, CHAR, BOOL, STRING;
terminal LBRACKET, LPAREN, LBRACET, RBRACKET, RPAREN, RBRACET;
terminal COMMA, DOUBLEDOT, RETURN, RETURNS;
terminal COPY, VAR, READ, PRINT, PLUSPLUS, LTLT, GTGT;
terminal AS, IN;
terminal IF, ELSE, ELIF, WHILE, CYCLE, ON, DO, DEFAULT, FOR, DEF, ASIG;


/* Non-terminals */
nonterminal program;
nonterminal main;
nonterminal decl_list;                      // arraylist of declarations (multiples or singles)
nonterminal const_decl, decl, def_decl;  // (just one declaration, multiple or single)
nonterminal asig;                 // (just one assignation, multiple or single)
nonterminal String code_block; // arraylist of assignations
nonterminal String code_block_loop; // arraylist of assignations
nonterminal cycle_body, cycle_on, else, elif; // arraylist of assignations
nonterminal type;
nonterminal expr_list;  // arraylist of expressions
nonterminal ident_list; // arraylist of identifiers (Strings)
nonterminal expr;
nonterminal arithmetic_op, relational_op, logical_op;
nonterminal String instruction, instruction_loop;
nonterminal ctrl_struct;
nonterminal args_list; // arraylist of types
nonterminal arg;

nonterminal type_list, dict_types, dict_type;
nonterminal dict_vals, dict_val;
nonterminal fi, elihw, elcyc, rof, fed;

/* Precedences */
precedence left SEMI;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left POW;

precedence left LTLT, GTGT, PLUSPLUS;
precedence left LT, LTE, GT, GTE, SHEQ, DEEQ, NOEQ;
precedence left AND, SAND, OR, SOR, XOR;

precedence right RPAREN;
//precedence left INTEGER_V, FLOAT_V, CHAR_V, TRUE, FALSE;

/* The grammar */

/*
      THE PROGRAM
 */
program   ::= main:m               {:System.out.println(m);:}
            | decl_list:ds main:m  {:System.out.println(ds);System.out.println(m);:}
            ;

main      ::= MAIN code_block:cb ENDMAIN {:System.out.println("MAIN\n"+cb+"\nENDMAIN");:}
            ;

/*
      DECLARATIONS
 */

/* --- Basic structure --- */
decl_list    ::= decl_list:ds const_decl:d SEMI
               | decl_list:ds def_decl:d SEMI
               | const_decl:d SEMI
               | def_decl:d SEMI
               ;

/* --- Functions declarations --- */
def_decl     ::= DEF IDENTIFIER:id LPAREN args_list:al RPAREN RETURNS LT type:t GT DOUBLEDOT code_block:cb fed;

args_list    ::= args_list:al COMMA arg:a
               | arg:a
               ;

arg          ::= COPY IDENTIFIER:id AS type:t
               | IDENTIFIER:id AS type:t
               ;

/* --- Variables and constants declarations --- */
const_decl   ::= VAR decl:d
               | decl:d
               ;

decl         ::= type:t asig:a
               | type:t ident_list:ids
               ;

ident_list ::= ident_list:il COMMA IDENTIFIER:id
             | IDENTIFIER:id
             ;

// Types
type         ::=
    /* ----- Basic types ----- */
                 INTEGER
               | FLOAT
               | CHAR
               | BOOL

    /* ----- Composite types ----- */
               | STRING
               | LBRACKET type RBRACKET     // list - [type]
               | LPAREN type_list RPAREN    // tuple - (type0, type1, ..., typen)
               | LBRACET dict_types RBRACET // dictionary - {ident0:type0,ident1:type1...,identn:typen}
               ;

type_list    ::= type_list COMMA type
               | type
               ;

dict_types   ::= dict_types COMMA dict_type
               | dict_type
               ;

dict_type    ::= IDENTIFIER DOUBLEDOT type;


/* --- Code blocks --- */
code_block    ::= code_block:cb instruction:i SEMI {:RESULT="(\n"+cb+")\n"+i;:}
| instruction:i SEMI {:RESULT=i;:}
                ;

instruction   ::= asig:a   {:RESULT="ASIG\n";:}
                | PRINT LPAREN expr:e RPAREN {:RESULT="PRINT\n";:}
                | const_decl:d {:RESULT="DECL\n";:}
                | def_decl:dd {:RESULT="DEF_DECL\n";:}
                | IDENTIFIER:id LPAREN expr_list:el RPAREN {:RESULT="FUCTION_CALL\n";:}
                | ctrl_struct:cs {:RESULT="CNTRL_STRUCT\n";:}
                | RETURN expr:e {:RESULT="RETURN\n";:}
                ;

//Codeblocks special for loops because loops can't have function declarations
code_block_loop   ::= code_block_loop:cb instruction_loop:i SEMI {:RESULT="("+cb+")"+i;:}
                    | instruction_loop:i SEMI {:RESULT=i;:}
                    ;

instruction_loop  ::= asig:a {:RESULT="ASIG\n";:}
                    | PRINT LPAREN expr:e RPAREN {:RESULT="PRINT\n";:}
                    | const_decl:d {:RESULT="DECL\n";:}
                    | IDENTIFIER:id LPAREN expr_list:el RPAREN {:RESULT="FUCTION_CALL\n";:}
                    | ctrl_struct:cs {:RESULT="CNTRL_STRUCT\n";:}
                    | RETURN expr:e {:RESULT="RETURN\n";:}
                    ;

/* --- Control structures --- */
ctrl_struct   ::= IF expr:e DOUBLEDOT code_block:cb else:el fi
                | WHILE expr:e DOUBLEDOT code_block_loop:cb elihw
                | FOR IDENTIFIER:id IN expr:e DOUBLEDOT code_block_loop:cb rof
                | CYCLE DOUBLEDOT code_block_loop:cb cycle_body:cd elcyc
                | CYCLE SEMI cycle_body:cd elcyc
                ;

// If else/elif clause
else          ::= elif:el ELSE DOUBLEDOT code_block:cb
                | elif:el
                ;

elif          ::= elif:el ELIF expr:e DOUBLEDOT code_block:cb
                |
                ;

// Cycle body
cycle_body  ::= DEFAULT DOUBLEDOT code_block_loop:cb
              | cycle_on:co DEFAULT DOUBLEDOT code_block_loop:cb
              | cycle_on:co
              ;

cycle_on    ::= cycle_on:co ON expr:e DO DOUBLEDOT code_block_loop:cb
              | ON expr:e DO DOUBLEDOT code_block_loop:cb
              ;

// Asignation
asig      ::= ident_list:il ASIG expr_list:el;
// No, it doesn't generate valid asignations only,
// that's checked while building the AST.

// Control structures terminators
fi        ::= END | ENDIF;
elihw     ::= END | ENDWHILE;
rof       ::= END | ENDFOR;
elcyc     ::= END | ENDCYCLE;
fed       ::= END | ENDDEF;


/*
      EXPRESIONS
 */
expr_list ::= expr_list:el COMMA expr:e
            | expr:e
            ;

expr      ::=
    /* ----- Basic types ----- */
              CHAR_V:e
            | INTEGER_V:e
            | FLOAT_V:e
            | TRUE
            | FALSE
            | IDENTIFIER:n
//            | LPAREN expr:e RPAREN
            | LPAREN expr_list:e RPAREN // tuples and parentitation

    /* --- Arithmetic, relational and logical operations --- */
            | expr:e1 arithmetic_op:o expr:e2
	    | expr:e1 relational_op:o expr:e2	
	    | expr:e1 logical_op:o expr:e2	
            | MINUS:o expr:e        		       				
            | NOEQ:o expr:e

    /* ----- Functions calls ----- */
            | IDENTIFIER:n LPAREN expr_list:el RPAREN

    /* ----- Composite types ----- */
            //Tuples are at basic types because, for example, (6) it's just 6
            | STRING:e
            | LBRACKET RBRACKET               // [] empty list
            | LPAREN RPAREN                   // () empty tuple
            | LBRACET RBRACET                 // {} empty dictionary
            | LBRACKET expr_list RBRACKET     // list
            | LBRACET dict_vals RBRACET       // dictionary
    /* ----- Composite types operations ----- */
            | IDENTIFIER LBRACKET expr RBRACKET                 // indexing
            | IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET  // slicing
            | expr PLUSPLUS expr                                // plosplos
            | expr LTLT expr                                    // push
            | expr GTGT expr                                    // pop

    /* ----- Other expressions ----- */
            | READ
	    ;

//Dictionary values
dict_vals       ::= dict_vals COMMA dict_val
                  | dict_val
                  ;
dict_val        ::= IDENTIFIER DOUBLEDOT expr;

arithmetic_op ::= PLUS:o
                | MINUS:o
                | TIMES:o
                | DIVIDE:o
                | MOD:o
                | POW:o
                ;

relational_op ::= LT:o
                | GT:o
                | LTE:o
                | GTE:o
                | SHEQ:o
                | DEEQ:o
                | NOEQ:o
                ;

logical_op    ::= AND:o
                | SAND:o /* & -- no short-circuit*/   // &
                | OR:o
                | SOR:o  /* | -- no short-circuit*/   // |
                | XOR:o
                ;

/*
      USELESS STUFF

number       ::= INTEGER_V
               | FLOAT_V
               ;

// Useless comentary. It really feels like it belongs here ... :) ... GJ

bool         ::= TRUE | FALSE;

s_ident_list ::= s_ident_list IDENTIFIER
               | IDENTIFIER
               ;
*/