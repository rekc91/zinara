package zinara.parser;

import zinara.ast.*;

import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};


/* Terminals (tokens returned by the scanner). */
terminal Integer INTEGER_V;
terminal Float FLOAT_V;
terminal Boolean TRUE,FALSE;
terminal CHAR_V, STRING_V;
terminal SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD, POW, UMINUS;
terminal Main MAIN; 
terminal END, ENDIF, ENDWHILE, ENDFOR, ENDCYCLE, ENDDEF, ENDMAIN; 
terminal INTEGER, FLOAT, CHAR, BOOL, STRING;
terminal LBRACKET, LPAREN, LBRACET, RBRACKET, RPAREN, RBRACET;
terminal COMMA, DOUBLEDOT, IDENTIFIER, RETURN, RETURNS;
terminal COPY, VAR, READ, PRINT, PLUSPLUS, LTLT, GTGT;
terminal LT, GT, LTE, GTE, SHEQ, DEEQ, NOEQ, IN; 
terminal AND, SAND, OR, SOR, XOR, AS; 
terminal IF, ELSE, ELIF, WHILE, CYCLE, ON, DO, FOR, DEF, ASIG; 


/* Non-terminals */
nonterminal program, main, type, type_list, dict_types, dict_type;
nonterminal decl_list, declaration, decl, args_list, def_decl, arg;
nonterminal arithmetic_op, relational_op, logical_op, expr_comma_list;
nonterminal dict_vals, dict_val, instruction, instruction_loop, ctrl_struct;
nonterminal code_block, code_block_loop, s_asig, s_asig_list, asig, asig_list, conds;
nonterminal fi, elihw, elcyc, rof, fed, print, number, identifier;
nonterminal inst_list, cycle_blocks;
nonterminal expr_list, expr_part, bool, elif_list;
nonterminal expr;

/* Precedences */
precedence left SEMI;
precedence right ASIG;

precedence left AND, SAND, OR, SOR, XOR;
precedence left SHEQ, DEEQ, NOEQ;
precedence left LTLT, GTGT, PLUSPLUS;
precedence left LT, LTE, GT, GTE;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left POW;
precedence left UMINUS;


//precedence left INTEGER_V, FLOAT_V, CHAR_V, TRUE, FALSE;

/* The grammar */

/*
      THE PROGRAM
 */
program   ::= main:m                       {: new Program(); :}
            | decl_list:d main:m           {: new Program(); :}
            ;

main      ::= MAIN code_block:cb ENDMAIN       {: new Main(); :}
            ;

/*
      DECLARATIONS
 */
// Types
type         ::= INTEGER                    {: new String("Int"); :}
               | FLOAT                      {: new String("Float"); :}
               | CHAR                       {: new String("Char"); :}
               | BOOL                       {: new String("Bool"); :}
               ;

type_list    ::= type_list COMMA type
               | type
               ;

decl_list    ::= decl_list declaration SEMI  {: new Declaration(); :}
               | decl_list def_decl SEMI     {: new Declaration(); :}
               | declaration SEMI            {: new Declaration(); :}
               | def_decl SEMI               {: new Declaration(); :}
               ;

declaration  ::= VAR decl
               | decl
               ;
decl         ::= type s_asig            {: new Declaration(); :}
               | type IDENTIFIER
               ;

def_decl     ::= DEF IDENTIFIER LPAREN args_list RPAREN RETURNS LT type GT DOUBLEDOT code_block fed;

args_list    ::= args_list COMMA arg
               | arg
               ;

arg          ::= COPY IDENTIFIER AS type
               | IDENTIFIER AS type
               ;

/*
      EXPRESIONS
 */
expr_list ::= expr_list COMMA expr
            | expr
            ;

expr      ::= number
            | CHAR_V
            | INTEGER_V
            | FLOAT_V
            | TRUE
            | FALSE
            | bool
            | identifier
	    | LPAREN expr RPAREN
    /* ----- Basic types ----- */
            | expr arithmetic_op expr
            | expr relational_op expr
            | expr logical_op expr
	    | MINUS expr
	    | NOEQ expr
    /* ----- Functions calls ----- */
            | IDENTIFIER LPAREN expr_list RPAREN
    /* ----- Other expressions ----- */
            | READ
	    ;

arithmetic_op ::= PLUS
                | MINUS
                | TIMES
                | DIVIDE
                | MOD
                | POW
                ;

relational_op ::= LT
                | GT
                | LTE
                | GTE
                | SHEQ
                | DEEQ
                | NOEQ
                ;

logical_op    ::= AND
                | SAND  // &
                | OR
                | SOR   // |
                | XOR
                ;
/*
bitwise_op    ::= ???
*/

expr_comma_list ::= expr_comma_list COMMA expr
                  | expr
                  ;

dict_vals       ::= dict_vals COMMA dict_val
                  | dict_val
                  ;
dict_val        ::= IDENTIFIER DOUBLEDOT expr;


/*
      INSTRUCTIONS
 */
inst_list     ::= inst_list instruction SEMI
                | instruction SEMI
                ;

instruction   ::= asig
                | print
		| declaration
		| def_decl
                | IDENTIFIER LPAREN expr_list RPAREN
                | ctrl_struct
                | RETURN expr
                ;

instruction_loop  ::= asig
                    | print
     		    | declaration
                    | IDENTIFIER LPAREN expr_list RPAREN
                    | ctrl_struct
                    | RETURN expr
                    ;

ctrl_struct   ::= IF expr DOUBLEDOT code_block elif_list fi
                | WHILE expr DOUBLEDOT code_block_loop elihw
                | FOR IDENTIFIER IN expr DOUBLEDOT code_block_loop rof
                | CYCLE DOUBLEDOT code_block_loop cycle_blocks elcyc
                | CYCLE SEMI cycle_blocks elcyc
                ;

elif_list     ::= elif_list ELIF expr DOUBLEDOT code_block
                | elif_list ELSE DOUBLEDOT code_block
		|
                ;

code_block    ::= code_block instruction SEMI
                | instruction SEMI
                ;

code_block_loop ::= code_block_loop instruction_loop SEMI
                 | instruction_loop SEMI
                 ;

cycle_blocks  ::= cycle_blocks ON expr DO DOUBLEDOT code_block_loop
                | ON expr DO DOUBLEDOT code_block_loop
                ;

s_asig      ::= IDENTIFIER s_asig_list expr;
s_asig_list ::= COMMA IDENTIFIER s_asig_list expr COMMA
              | ASIG
              ;

asig        ::= identifier asig_list expr;
asig_list   ::= COMMA identifier asig_list expr COMMA
              | ASIG
              ;

fi        ::= END | ENDIF;
elihw     ::= END | ENDWHILE;
rof       ::= END | ENDFOR;
elcyc     ::= END | ENDCYCLE;
fed       ::= END | ENDDEF;

print     ::= PRINT LPAREN expr RPAREN;

identifier   ::= IDENTIFIER
               | IDENTIFIER LBRACKET INTEGER_V RBRACKET
               | IDENTIFIER LBRACKET IDENTIFIER RBRACKET
               ;

/*
      USELESS STUFF

number       ::= INTEGER_V
               | FLOAT_V
               ;

bool         ::= TRUE | FALSE;

s_ident_list ::= s_ident_list IDENTIFIER
               | IDENTIFIER
               ;
*/