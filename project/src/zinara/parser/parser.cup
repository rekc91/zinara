package zinara.parser;

import java.util.ArrayList;
import java.util.Hashtable;

import java_cup.runtime.*;

import zinara.ast.*;
import zinara.ast.expression.*;
import zinara.ast.instructions.*;
import zinara.ast.type.*;
import zinara.symtable.*;
import zinara.semantic.Operators;

/* Preliminaries to set up and use the scanner.  */

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
action code{:
SymTable globalTable = new SymTable();
SymTable mainTable = new SymTable(globalTable);
SymTable currentTable = globalTable;
:}

parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public static final Operators operators = new Operators();
:};


/* Terminals (tokens returned by the scanner). */
terminal Integer INTEGER_V;
terminal Float FLOAT_V;
terminal TrueExp TRUE;
terminal FalseExp FALSE;
terminal String IDENTIFIER;
terminal String PLUS, MINUS, UMINUS, TIMES, DIVIDE, MOD, POW;
terminal String LT, GT, LTE, GTE, SHEQ, DEEQ, NOEQ;
terminal String AND, SAND, OR, SOR, XOR;

terminal Character CHAR_V;
terminal Main MAIN;
terminal SEMI;
terminal END, ENDIF, ENDWHILE, ENDFOR, ENDCYCLE, ENDDEF, ENDMAIN;
terminal INTEGER, FLOAT, CHAR, BOOL, STRING;
terminal LBRACKET, LPAREN, LBRACET, RBRACKET, RPAREN, RBRACET;
terminal COMMA, DOUBLEDOT, RETURN, RETURNS;
terminal COPY, VAR, READ, PRINT, PLUSPLUS, LTLT, GTGT;
terminal AS, IN;
terminal IF, ELSE, ELIF, WHILE, CYCLE, ON, DO, DEFAULT, FOR, DEF, ASIG;


/* Non-terminals */
nonterminal Program program;
nonterminal Main main;
nonterminal ArrayList decl_list;                      // arraylist of declarations (multiples or singles)
nonterminal Declaration const_decl, decl, def_decl;  // (just one declaration, multiple or single)
nonterminal Assignation asig, dasig;                 // (just one assignation, multiple or single)
nonterminal CodeBlock code_block, code_block_loop; // arraylist of assignations
nonterminal ArrayList cycle_body, cycle_on, else, elif; // arraylist of assignations
nonterminal Type type;
nonterminal ArrayList expr_list;  // arraylist of expressions
nonterminal ArrayList  ident_list; // arraylist of identifiers (Strings)
nonterminal Expression expr;
nonterminal Integer arithmetic_op, relational_op, logical_op;
nonterminal Instruction ctrl_struct, instruction, instruction_loop;
nonterminal ArrayList args_list; // arraylist of types
nonterminal Type arg;
nonterminal Hashtable dict_vals;
nonterminal ArrayList dict_val;
nonterminal fi, elihw, elcyc, rof, fed;


// Cambiar cuando se creen los tipos necesarios
nonterminal ArrayList type_list;
nonterminal Hashtable dict_types;
nonterminal ArrayList dict_type;



/* Precedences */
precedence left SEMI;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left POW;

precedence left LTLT, GTGT, PLUSPLUS;
precedence left LT, LTE, GT, GTE, SHEQ, DEEQ, NOEQ;
precedence left AND, SAND, OR, SOR, XOR;

precedence right RPAREN;
//precedence left INTEGER_V, FLOAT_V, CHAR_V, TRUE, FALSE;

/* The grammar */

/*
      THE PROGRAM
 */
program   ::= main:m               {: RESULT = new Program(m);   :}
            | decl_list:ds main:m  {: RESULT = new Program(m,ds);:}
            ;

main      ::= MAIN {:currentTable=mainTable;:} code_block:cb ENDMAIN    {: RESULT = new Main(cb); :}
            ;

/*
      DECLARATIONS
 */

/* --- Basic structure --- */
decl_list    ::= decl_list:ds const_decl:d SEMI  {: RESULT = ds; RESULT.add(d);:}
               | decl_list:ds def_decl:d SEMI    {: RESULT = ds; RESULT.add(d);:}
               | const_decl:d SEMI               {: RESULT = new ArrayList(); RESULT.add(d);:}
               | def_decl:d SEMI                 {: RESULT = new ArrayList(); RESULT.add(d);:}
               ;

/* --- Functions declarations --- */
def_decl     ::= DEF IDENTIFIER:id 
                 {:
		  currentTable.checkDoubleDeclaration(id);
		  currentTable = new SymTable(currentTable);
		  :}
                 LPAREN args_list:al RPAREN RETURNS LT type:t GT DOUBLEDOT
		     code_block:cb 
                 fed
                 {: 
		  RESULT = new SingleDeclaration(new FunctionType(al,t,cb),id,null,false);
		  currentTable=currentTable.getFather();
		  cb.setSymTable(currentTable);
		  currentTable.addSymbol(id,new SymValue(new FunctionType(al, t, cb), false));
                 :};

args_list    ::= args_list:al COMMA arg:a        {: al.add(a); RESULT = al; :}
               | arg:a                           {:
		                                   RESULT = new ArrayList();
						   RESULT.add(a); 
						   :}
               ;

arg          ::= COPY IDENTIFIER:id AS type:t    {: 
						  RESULT = t;
						  currentTable.addSymbol(id,new SymValue(t,true));
						  :}
               | IDENTIFIER:id AS type:t         {: 
		                                  RESULT = t;
						  currentTable.addSymbol(id,new SymValue(t,true));
						  :}
               ;

/* --- Variables and constants declarations --- */
const_decl   ::= VAR decl:d                   {:
					       if (d.isSingle())
						   ((SingleDeclaration)d).setVariable(true);
					       else {
						   for (int i = 0; i < ((MultipleDeclaration)d).declarations.size(); i++) ((MultipleDeclaration)d).get(i).setVariable(true);//((SingleDeclaration)(d.get(i))).setVariable(true); 
					       }
					       currentTable.addDeclaration(d);
					       RESULT = d;
					       :}
               | decl:d                       {: currentTable.addDeclaration(d); RESULT = d; :}
               ;

decl         ::= type:t dasig:a               {:
					      if (a.isSingle())
					          RESULT = new SingleDeclaration(new ConstantType(t, ((SingleAssignation)a).getExpression()), ((SingleAssignation)a).getId(), ((SingleAssignation)a).getExpression(), false);
					      else
					          RESULT = new MultipleDeclaration(((MultipleAssignation)a),t);
					      :}         

               | type:t ident_list:ids       {:
		                              if (ids.size() == 1)
						  RESULT = new SingleDeclaration(t, (String)(ids.get(0)),null, false);
					      else
						  RESULT = new MultipleDeclaration(ids,t);
					      :}
               ;

ident_list ::= ident_list:il COMMA IDENTIFIER:id  {: RESULT = il; il.add(id); :}
             | IDENTIFIER:id                      {: RESULT = new ArrayList(); RESULT.add(id); :}
             ;

// Types
type         ::=
    /* ----- Basic types ----- */
                 INTEGER                    {: RESULT = new IntType(); :}
               | FLOAT                      {: RESULT = new FloatType(); :}
               | CHAR                       {: RESULT = new CharType(); :}
               | BOOL                       {: RESULT = new BoolType(); :}

    /* ----- Composite types ----- */
//                | STRING                        {: RESULT = new StringType(); :}
//                | LBRACKET type:t RBRACKET      {: RESULT = new ListType(t); :}
//                  // list - [type]
//                | LPAREN type_list:tl RPAREN    {: RESULT = new TupleType(tl); :}
//                  // tuple - (type0, type1, ..., typen)
//                | LBRACET dict_types:dt RBRACET {: RESULT = new DictType(dt); :}  
//                  // dictionary - {ident0:type0,ident1:type1...,identn:typen}
               ;

type_list    ::= type_list:tl COMMA type:t     {:tl.add(t); RESULT = tl;:}
               | type:t                        {:RESULT = new ArrayList(); RESULT.add(t);:}
               ;

dict_types   ::= dict_types:dt COMMA dict_type:t {:
						  if (dt.put(t.get(0),t.get(1))!=null)
						      System.out.println("Entrada repetida en un diccionario");
						  RESULT = dt;
						  :}
               | dict_type:t                     {:RESULT = new Hashtable(); RESULT.put(t.get(0),t.get(1));:}
               ;

dict_type    ::= IDENTIFIER:id DOUBLEDOT type:t  {: RESULT = new ArrayList(2); RESULT.add(id); RESULT.add(t);:}
               ;


/* --- Code blocks --- */
code_block    ::= code_block:cb instruction:i SEMI          {: cb.addInst(i); RESULT = cb;:}
                | instruction:i SEMI                        {: RESULT = new CodeBlock(); RESULT.addInst(i); :}
                ;

instruction   ::= asig:a                                    {: RESULT = a; :}
                | PRINT LPAREN expr:e RPAREN                {: RESULT = new Print(e); :}
                | const_decl:d                              {: RESULT = new DecInst(d); :}
                | def_decl:dd                               {: RESULT = new DecInst(dd); :}
                | IDENTIFIER:id LPAREN expr_list:el RPAREN  {: currentTable.containsIdOrDie(id); RESULT = new FunctionCall(id, el); :}
                | ctrl_struct:cs                            {: RESULT = cs; :}
                | RETURN expr:e                             {: RESULT = new Return(e); :}
                ;

//Codeblocks special for loops because loops can't have function declarations
code_block_loop   ::= code_block_loop:cb instruction_loop:i SEMI  {:cb.addInst(i); RESULT = cb;:}
                    | instruction_loop:i SEMI                     {:RESULT = new CodeBlock(); RESULT.addInst(i);:}
                    ;

instruction_loop  ::= asig:a                                      {: RESULT = a; :}
                    | PRINT LPAREN expr:e RPAREN                  {: RESULT = new Print(e); :}
                    | const_decl:d                                {: RESULT = new DecInst(d); :}
                    | IDENTIFIER:id LPAREN expr_list:el RPAREN    {: currentTable.containsIdOrDie(id); RESULT = new FunctionCall(id, el); :}
                    | ctrl_struct:cs                              {: RESULT = cs; :}
                    | RETURN expr:e                               {: RESULT = new Return(e); :}
                    ;

/* --- Control structures --- */
ctrl_struct   ::= IF expr:e DOUBLEDOT code_block:cb else:el fi                  {: el.add(0,new IfCase(cb,e)); RESULT = new If(el); :}
                | WHILE expr:e DOUBLEDOT code_block_loop:cb elihw               {: RESULT = new While(cb,e);:}
                | FOR IDENTIFIER:id IN expr:e DOUBLEDOT code_block_loop:cb rof  
                | CYCLE DOUBLEDOT code_block_loop:cb cycle_body:cd elcyc        {: RESULT = new Cycle(cd,cb);:}
                | CYCLE SEMI cycle_body:cd elcyc                                {: RESULT = new Cycle(cd,null);:}
                ;

// If else/elif clause
else          ::= elif:el ELSE DOUBLEDOT code_block:cb   {: el.add(new IfCase(cb,new TrueExp())); RESULT = el; :}
                | elif:el                                {: RESULT = el; :}
                ;

elif          ::= elif:el ELIF expr:e DOUBLEDOT code_block:cb   {: el.add(new IfCase(cb,e)); RESULT=el;:}
                |                                               {: RESULT = new ArrayList(); :}
                ;

// Cycle body
cycle_body  ::= DEFAULT DOUBLEDOT code_block_loop:cb               {: RESULT = new ArrayList(); RESULT.add(new CycleCase(cb,new TrueExp())); :}
              | cycle_on:co DEFAULT DOUBLEDOT code_block_loop:cb   {: co.add(new CycleCase(cb,new TrueExp())); RESULT = co; :}
              | cycle_on:co                                        {: RESULT = co; :}
              ;

cycle_on    ::= cycle_on:co ON expr:e DO DOUBLEDOT code_block_loop:cb {: co.add(new CycleCase(cb,e)); RESULT = co; :}
              | ON expr:e DO DOUBLEDOT code_block_loop:cb             {: RESULT = (new ArrayList()); RESULT.add(new CycleCase(cb,e)); :}
              ;

// Asignation
dasig     ::= ident_list:il ASIG expr_list:el {: RESULT = new MultipleAssignation(il, el); :};
asig      ::= ident_list:il ASIG expr_list:el {: RESULT = currentTable.checkMultipleAssignations(il, el); :};
// No, it doesn't generate valid asignations only,
// that's checked while building the AST.

// Control structures terminators
fi        ::= END | ENDIF;
elihw     ::= END | ENDWHILE;
rof       ::= END | ENDFOR;
elcyc     ::= END | ENDCYCLE;
fed       ::= END | ENDDEF;


/*
      EXPRESIONS
 */
expr_list ::= expr_list:el COMMA expr:e  {: RESULT = el; el.add(e); :}
            | expr:e                     {: RESULT = new ArrayList(); RESULT.add(e); :}
            ;

expr      ::=
    /* ----- Basic types ----- */
              CHAR_V:e                                 {: RESULT = new CharExp(e.charValue()); :}
            | INTEGER_V:e                              {: RESULT = new IntegerExp(e.intValue()); :}
            | FLOAT_V:e                                {: RESULT = new FloatExp(e.floatValue()); :}
            | TRUE                                     {: RESULT = new TrueExp(); :}
            | FALSE                                    {: RESULT = new FalseExp(); :}
            | IDENTIFIER:n                             {: currentTable.containsIdOrDie(n); RESULT = new IdentifierExp(n); :}
           // tuples and parentitation
//             | LPAREN expr_list:e RPAREN                {:
// 		                                          if (e.size()==1)
// 							      RESULT = (Expression)e.get(0);
// 							  else
// 							      RESULT = new TupleExp(e);
// 							  :}
    /* --- Arithmetic, relational and logical operations --- */
            | expr:e1 arithmetic_op:o expr:e2          {: RESULT = new BinaryExp(o.intValue(), e1, e2); :}
	    | expr:e1 relational_op:o expr:e2	       {: RESULT = new BinaryExp(o.intValue(), e1, e2); :}
	    | expr:e1 logical_op:o expr:e2	       {: RESULT = new BinaryExp(o.intValue(), e1, e2); :}
            | MINUS:o expr:e        		       {: RESULT = new UnaryExp(sym.UMINUS, e); :}				
            | NOEQ:o expr:e                            {: RESULT = new UnaryExp(sym.NOEQ, e); :}

    /* ----- Functions calls ----- */
            | IDENTIFIER:n LPAREN expr_list:el RPAREN  {: RESULT = new CallExp(n, el); :}

    /* ----- Composite types ----- */
            //Tuples are at basic types because, for example, (6) it's just 6
//             | STRING:e                                   {:new StringExp(e);:}
//             | LBRACKET RBRACKET     /*[] empty list*/    {:new ListExp();:}
//             | LBRACET RBRACET   /*{} empty dictionary*/  {:new DictExp();:}
//             | LBRACKET expr_list:e RBRACKET   /*list*/   {:new ListExp(e);:}
//             | LBRACET dict_vals:dv RBRACET /*dictionary*/{:new DictExp(dv);:}
    /* ----- Composite types operations ----- */
            | IDENTIFIER LBRACKET expr RBRACKET                 // indexing
            | IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET  // slicing
            | expr PLUSPLUS expr                                // plosplos
            | expr LTLT expr                                    // push
            | expr GTGT expr                                    // pop

    /* ----- Other expressions ----- */
            | READ                                     {: RESULT = new ReadExp(); :}
	    ;

//Dictionary values
dict_vals       ::= dict_vals:dv COMMA dict_val:v      {:
							if (dv.put(v.get(0),v.get(1))!=null)
							    System.out.println("Entrada doblemente accesada en un diccionario");
							RESULT = dv;
							:}
                  | dict_val:v                         {: RESULT = new Hashtable(); RESULT.put(v.get(0),v.get(1));:}
                  ;
dict_val        ::= IDENTIFIER:id DOUBLEDOT expr:e   {: RESULT = new ArrayList(2); RESULT.add(id); RESULT.add(e);:}
                  ;

arithmetic_op ::= PLUS:o                            {: RESULT = new Integer(sym.PLUS); :}
                | MINUS:o                           {: RESULT = new Integer(sym.MINUS); :}
                | TIMES:o                           {: RESULT = new Integer(sym.TIMES); :}
                | DIVIDE:o                          {: RESULT = new Integer(sym.DIVIDE); :}
                | MOD:o                             {: RESULT = new Integer(sym.MOD); :}
                | POW:o                             {: RESULT = new Integer(sym.POW); :}
                ;

relational_op ::= LT:o                              {: RESULT = new Integer(sym.LT); :}
                | GT:o                              {: RESULT = new Integer(sym.GT); :}
                | LTE:o                             {: RESULT = new Integer(sym.LTE); :}
                | GTE:o                             {: RESULT = new Integer(sym.GTE); :}
                | SHEQ:o                            {: RESULT = new Integer(sym.SHEQ); :}
                | DEEQ:o                            {: RESULT = new Integer(sym.DEEQ); :}
                | NOEQ:o                            {: RESULT = new Integer(sym.NOEQ); :}
                ;

logical_op    ::= AND:o                             {: RESULT = new Integer(sym.AND); :}
                | SAND:o /* & -- no short-circuit*/ {: RESULT = new Integer(sym.SAND); :}  // &
                | OR:o                              {: RESULT = new Integer(sym.OR); :}
                | SOR:o  /* | -- no short-circuit*/ {: RESULT = new Integer(sym.SOR); :}  // |
                | XOR:o                             {: RESULT = new Integer(sym.XOR); :}
                ;

/*
      USELESS STUFF

number       ::= INTEGER_V
               | FLOAT_V
               ;

// Useless comentary. It really feels like it belongs here ... :) ... GJ

bool         ::= TRUE | FALSE;

s_ident_list ::= s_ident_list IDENTIFIER
               | IDENTIFIER
               ;
*/