package zinara.parser;

import java.util.ArrayList;
import java.util.HashMap;

import java_cup.runtime.*;

import zinara.ast.*;
import zinara.ast.expression.*;
import zinara.ast.instructions.*;
import zinara.ast.type.*;
import zinara.exceptions.InvalidDictionaryException;
import zinara.exceptions.KeyErrorException;
import zinara.exceptions.TypeClashException;
import zinara.exceptions.SyntaxErrorException;
import zinara.symtable.*;
import zinara.semantic.Operators;
import zinara.semantic.StaticTypeChecking;

/* Preliminaries to set up and use the scanner.  */

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
action code{:
SymTable globalTable = new SymTable();
SymTable mainTable = new SymTable(globalTable);
SymTable currentTable = globalTable;
:}

parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    public static final Operators operators = new Operators();
:};


/* Terminals (tokens returned by the scanner). */
terminal Integer INTEGER_V;
terminal Float FLOAT_V;
terminal TrueExp TRUE;
terminal FalseExp FALSE;
terminal String IDENTIFIER;
terminal String PLUS, MINUS, UMINUS, TIMES, DIVIDE, MOD, POW;
terminal String LT, GT, LTE, GTE, SHEQ, DEEQ, NOEQ;
terminal String AND, SAND, OR, SOR, XOR;

terminal Character CHAR_V;
terminal String STRING_V;
terminal Main MAIN;
terminal SEMI;
terminal END, ENDIF, ENDWHILE, ENDFOR, ENDCYCLE, ENDDEF, ENDMAIN;
terminal INTEGER, FLOAT, CHAR, BOOL, STRING;
terminal LBRACKET, LPAREN, LBRACET, RBRACKET, RPAREN, RBRACET;
terminal COMMA, DOUBLEDOTTERM, DOUBLEDOT, RETURN, LITTLE_ARROW;
terminal COPY, VAR, READ, PRINT, PLUSPLUS, LTLT, GTGT;
terminal AS, IN;
terminal IF, ELSE, ELIF, WHILE, CYCLE, ON, DO, DEFAULT, FOR, DEF, ASIG;
terminal CONTINUE, BREAK;

/* Non-terminals */
nonterminal Program program;
nonterminal Main main;
nonterminal ArrayList decl_list;                      // arraylist of declarations (multiples or singles)
nonterminal Declaration const_decl, decl, def_decl;  // (just one declaration, multiple or single)
nonterminal Assignation asig, dasig;                 // (just one assignation, multiple or single)
nonterminal CodeBlock code_block, code_block_loop; // arraylist of assignations
nonterminal ArrayList cycle_body, cycle_on, else, elif; // arraylist of assignations
nonterminal Type type, cast;
nonterminal ArrayList expr_list, expr_tuple;  // arraylist of expressions
nonterminal ArrayList  ident_list, decl_ident_list; // arraylist of lvalues
nonterminal Expression expr, relational_expr,other_expr;
nonterminal LValue l_value;
nonterminal LValueContents l_value_contents;
nonterminal Instruction ctrl_struct, instruction, instruction_loop;
nonterminal ArrayList args_list, args_list2; // arraylist of types
nonterminal Type arg;
nonterminal HashMap dict_vals;
nonterminal ArrayList dict_val;
nonterminal fi, elihw, elcyc, rof, fed;


// Cambiar cuando se creen los tipos necesarios
nonterminal ArrayList type_list;
nonterminal HashMap dict_types;
nonterminal ArrayList dict_type;
nonterminal Type def_type;


/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left POW;

precedence left LTLT, GTGT, PLUSPLUS;
precedence left LT, LTE, GT, GTE, SHEQ, DEEQ, NOEQ;
precedence left AND, SAND, OR, SOR, XOR;

//Porque ( expr ) tiene una produccion directa y se
//se puede hacer con ( expr_list ) con una sola
//expresion. Da shift/reduce, quiero que vaya por
//la parentizacion.
precedence right RPAREN;

/* The grammar */

/*
      THE PROGRAM
 */
program   ::= main:m               {: RESULT = new Program(currentTable, m);     :}
            | decl_list:ds main:m  {: RESULT = new Program(currentTable, m, ds); :}
            ;

main      ::= MAIN {: currentTable = currentTable.newTable(); :} code_block:cb {: currentTable = currentTable.getFather(); RESULT = new Main(cb); :} ENDMAIN
            ;

/*
      DECLARATIONS
 */
/* --- Basic structure --- */
decl_list    ::= decl_list:ds const_decl:d SEMI  {: RESULT = ds; RESULT.add(d);:}
               | decl_list:ds def_decl:d SEMI    {: RESULT = ds; RESULT.add(d);:}
               | const_decl:d SEMI               {: RESULT = new ArrayList(); RESULT.add(d);:}
               | def_decl:d SEMI                 {: RESULT = new ArrayList(); RESULT.add(d);:}
               ;

/* --- Functions declarations --- */
def_decl     ::= DEF IDENTIFIER:id 
                 {:
		  currentTable.checkDoubleDeclaration(id);
		  currentTable = currentTable.newTable();
		 :}
//                 LPAREN args_list:al RPAREN RETURNS LT type:t GT DOUBLEDOTTERM
                   LPAREN args_list:al RPAREN def_type:t DOUBLEDOTTERM
		 {:
		     currentTable.addSymbol("return", new SymValue(t,false));
		 :}
		     code_block:cb 
                 fed
                 {:
		  RESULT = new SingleDeclaration(new FunctionType(al,t,cb),id,null,false);
		  currentTable=currentTable.getFather();
		  cb.setSymTable(currentTable);
		  currentTable.addSymbol(id,new SymValue(new FunctionType(al, t, cb), false));
                 :};

args_list    ::= args_list2:al                   {: RESULT = al; :}
               |                                 {: RESULT = new ArrayList(); :}
	       ;

args_list2   ::= args_list2:al COMMA arg:a        {: al.add(a); RESULT = al; :}
               | arg:a                           {:
		                                   RESULT = new ArrayList();
						   RESULT.add(a); 
						   :}
               ;

arg          ::= COPY IDENTIFIER:id AS type:t    {: 
						  RESULT = t;
						  currentTable.addSymbol(id,new SymValue(t,true));
						  :}
               | IDENTIFIER:id AS type:t         {: 
		                                  RESULT = t;
						  currentTable.addSymbol(id,new SymValue(t,true));
						  :}
               ;

/* --- Variables and constants declarations --- */
const_decl   ::= VAR decl:d                   {:
					       SingleDeclaration currentDeclaration;
					       if (d.isSingle()) {
						   currentDeclaration = ((SingleDeclaration)d);
						   currentDeclaration.setVariable(true);
						   //currentDeclaration.setType(((ConstantType)(currentDeclaration.getType())).getRealType());
						   // Aqui, una vez agregada la declaracion, se chequea los tipos
						   if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
					       } else {
						   for (int i = 0; i < ((MultipleDeclaration)d).declarations.size(); i++) {
						       currentDeclaration = (SingleDeclaration)((MultipleDeclaration)d).get(i);
						       currentDeclaration.setVariable(true);
						       //((MultipleDeclaration)d).get(i).setType(((ConstantType)(((MultipleDeclaration)d).get(i).getType())).getRealType());
						       if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
						   }
					       }
					       currentTable.addDeclaration(d);
					       RESULT = d;
					       :}
               | decl:d                       {:
	            	                       SingleDeclaration currentDeclaration;
					       if (d.isSingle()) {
						   currentDeclaration = ((SingleDeclaration)d);
						   // Aqui, una vez agregada la declaracion, se chequea los tipos
						   if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
					       } else {
						   for (int i = 0; i < ((MultipleDeclaration)d).declarations.size(); i++) {
						       currentDeclaration = (SingleDeclaration)((MultipleDeclaration)d).get(i);
						       //((MultipleDeclaration)d).get(i).setType(((ConstantType)(((MultipleDeclaration)d).get(i).getType())).getRealType());
						       if (currentDeclaration.getValue() != null && !currentDeclaration.getType().equals(((Expression)currentDeclaration.getValue()).getType())) throw new TypeClashException("Asignacion invalida: tipo de la expresion `" + (Expression)currentDeclaration.getValue() + "` difiere del tipo de la declaracion " + currentDeclaration.getType());
						   }
					       }
		                               currentTable.addDeclaration(d); RESULT = d; 
					       :}
               ;

decl         ::= type:t dasig:a               {:
					      if (a.isSingle())
					          RESULT = new SingleDeclaration(new ConstantType(t, ((SingleAssignation)a).getExpression()), ((Identifier)((SingleAssignation)a).getLValue()).getIdentifier(), ((SingleAssignation)a).getExpression(), false);
					      else
					          RESULT = new MultipleDeclaration(((MultipleAssignation)a),t);
					      :}

               | type:t decl_ident_list:ids       {:
		                              if (ids.size() == 1)
						  RESULT = new SingleDeclaration(new ConstantType(t, null), (String)(ids.get(0)), null, false);
					      else
						  RESULT = new MultipleDeclaration(ids, new ConstantType(t, null));
					      :}
               ;

decl_ident_list ::= decl_ident_list:il COMMA IDENTIFIER:id   {: RESULT = il; il.add(id); :}
                  | IDENTIFIER:id                            {: RESULT = new ArrayList(); RESULT.add(id); :}
                  ;

ident_list   ::= ident_list:il COMMA l_value:id        {: RESULT = il; il.add(id); :}
               | l_value:id                            {: RESULT = new ArrayList(); RESULT.add(id); :}
               ;

l_value      ::= IDENTIFIER:id                                                      {: SymTable finded = currentTable.getSymTableForIdOrDie(id); RESULT = new Identifier(id, finded); :}
               | l_value:lv LBRACKET expr:e RBRACKET                                {: RESULT = StaticTypeChecking.checkAndReturnLValue(lv, e); :}
               | l_value:lv LBRACKET other_expr:e DOUBLEDOT other_expr RBRACKET     {: RESULT = StaticTypeChecking.checkAndReturnLValue(lv, e); :}
//               | l_value:lv LBRACKET IDENTIFIER:id RBRACKET                         {: RESULT = StaticTypeChecking.checkAndReturnLValue(lv, id, currentTable); :}
               ;

// Types
type         ::=
    /* ----- Basic types ----- */
                 INTEGER                    {: RESULT = new IntType(); :}
               | FLOAT                      {: RESULT = new FloatType(); :}
               | CHAR                       {: RESULT = new CharType(); :}
               | BOOL                       {: RESULT = new BoolType(); :}

    /* ----- Composite types ----- */
               | STRING                     {: RESULT = new StringType(); :}
               | LBRACKET type:t RBRACKET   {: RESULT = new ListType(t); :}
                 // list - [type]
               | LPAREN type_list:tl RPAREN {: RESULT = new TupleType(tl); :}
                 // tuple - (type0, type1, ..., typen)
               | LBRACET dict_types:dt RBRACET {: RESULT = new DictType(dt); :}  
                 // dictionary - {ident0:type0,ident1:type1...,identn:typen}
               ;

type_list    ::= type_list:tl COMMA type:t     {:tl.add(t); RESULT = tl;:}
               | type:t                        {:RESULT = new ArrayList(); RESULT.add(t);:}
               ;

dict_types   ::= dict_types:dts COMMA dict_type:dt {:
						    if (dts.put(dt.get(0),dt.get(1))!=null)
							throw new InvalidDictionaryException("Entrada doblemente declarada");
						    RESULT = dts;
						    :}
               | dict_type:dt                       {:RESULT = new HashMap(); RESULT.put(dt.get(0),dt.get(1));:}
               ;

dict_type    ::= IDENTIFIER:id DOUBLEDOT type:t  {: RESULT = new ArrayList(2); RESULT.add(id); RESULT.add(t);:}
               ;

def_type ::= LITTLE_ARROW type:t {: RESULT = t; :}
           | 
	   ;

/* --- Code blocks --- */
code_block    ::= code_block:cb instruction:i SEMI          {: cb.addInst(i); RESULT = cb;:}
                | instruction:i SEMI                        {: RESULT = new CodeBlock(); RESULT.addInst(i); :}
                ;

instruction   ::= asig:a                                    {: RESULT = a; :}
                | PRINT LPAREN expr:e RPAREN                {: RESULT = new Print(e); :}
                | const_decl:d                              {: RESULT = new DecInst(d); :}
                | def_decl:dd                               {: RESULT = new DecInst(dd); :}
                | IDENTIFIER:id LPAREN expr_list:el RPAREN  {: RESULT = StaticTypeChecking.checkCallInst(id, el, currentTable); :}
                | IDENTIFIER:id LPAREN RPAREN               {: RESULT = StaticTypeChecking.checkCallInst(id, new ArrayList(), currentTable); :}
                | ctrl_struct:cs                            {: RESULT = cs; :}
                | RETURN expr:e                             {: RESULT = StaticTypeChecking.checkReturnValue(e, currentTable); :}
                ;

//Codeblocks special for loops because loops can't have function declarations
code_block_loop   ::= code_block_loop:cb instruction_loop:i SEMI  {:cb.addInst(i); RESULT = cb;:}
                    | instruction_loop:i SEMI                     {:RESULT = new CodeBlock(); RESULT.addInst(i);:}
                    ;

instruction_loop  ::= asig:a                                      {: RESULT = a; :}
                    | PRINT LPAREN expr:e RPAREN                  {: RESULT = new Print(e); :}
                    | const_decl:d                                {: RESULT = new DecInst(d); :}
                    | IDENTIFIER:id LPAREN expr_list:el RPAREN    {: RESULT = StaticTypeChecking.checkCallInst(id, el, currentTable); :}
                    | IDENTIFIER:id LPAREN RPAREN                 {: RESULT = StaticTypeChecking.checkCallInst(id, new ArrayList(), currentTable); :}
                    | ctrl_struct:cs                              {: RESULT = cs; :}
                    | RETURN expr:e                               {: RESULT = new Return(e); :}
                    | CONTINUE                                    {: RESULT = new Continue(); :}
                    | BREAK                                       {: RESULT = new Break(); :}
                    ;

/* --- Control structures --- */
ctrl_struct   ::= 
                  /*If*/
                  IF expr:e DOUBLEDOTTERM
		  {: 
		   StaticTypeChecking.checkExpression(e, new BoolType());
		   currentTable = currentTable.newTable();
		   :} 
                      code_block:cb
                  else:el fi                  
		  {:currentTable = currentTable.getFather();
                    el.add(0,new IfCase(cb,e)); RESULT = new If(el); :}

                  /*WHILE*/
                | WHILE expr:e DOUBLEDOTTERM
		  {:StaticTypeChecking.checkExpression(e, new BoolType());
		    currentTable = currentTable.newTable(); :}
                      code_block_loop:cb
                  elihw
                  {:currentTable = currentTable.getFather();
                    RESULT = new While(cb,e); :}

                  /*FOR*/
                | FOR IDENTIFIER:id IN expr:e DOUBLEDOTTERM
		{:
		 StaticTypeChecking.checkIterable(e);
		 currentTable = currentTable.newTable();
		 currentTable.addSymbol(id,new SymValue(((ListType)(e.getType().getType())).getInsideType(),false));
		 :}
		      code_block_loop:cb
		      {: currentTable = currentTable.getFather(); RESULT = new For(id, e, cb); :}
                  rof

                  /*CYCLE - WITH BRANCHES*/
                | CYCLE DOUBLEDOTTERM
		  {: currentTable = currentTable.newTable(); :}
                      code_block_loop:cb 
                      cycle_body:cd
                  {:currentTable = currentTable.getFather();
                    RESULT = new Cycle(cd,cb);:}
                  elcyc

                  /*CYCLE - NO BRANCHES*/
                | CYCLE DOUBLEDOTTERM
                      cycle_body:cd
                  elcyc
                  {: RESULT = new Cycle(cd,null);:}
                ;


// If else/elif clause
else          ::= elif:el ELSE DOUBLEDOTTERM 
                  {: currentTable = currentTable.newTable(); :}
                       code_block:cb
                  {: currentTable = currentTable.getFather();
                     el.add(new IfCase(cb,new TrueExp()));
                     RESULT = el; :}
                | elif:el                    {: RESULT = el; :}
                ;

elif          ::= elif:el ELIF expr:e DOUBLEDOTTERM
                  {:StaticTypeChecking.checkExpression(e, new BoolType());
                    currentTable = currentTable.newTable(); :}
                       code_block:cb
                  {: el.add(new IfCase(cb,e));
                     RESULT=el; currentTable = currentTable.getFather(); :}
                |  {: RESULT = new ArrayList(); :}
                ;

// Cycle body
cycle_body  ::= DEFAULT DOUBLEDOTTERM
                {: currentTable = currentTable.newTable(); :}  
                    code_block_loop:cb
                {:currentTable = currentTable.getFather();
                  RESULT = new ArrayList(); RESULT.add(new CycleCase(cb,new TrueExp()));:}

              | cycle_on:co
                DEFAULT DOUBLEDOTTERM
                {: currentTable = currentTable.newTable(); :}  
                    code_block_loop:cb
                {:currentTable = currentTable.getFather(); 
                  co.add(new CycleCase(cb,new TrueExp())); RESULT = co; :}


              | cycle_on:co  {: RESULT = co; :}
              ;

cycle_on    ::= cycle_on:co
                ON expr:e DO DOUBLEDOTTERM
		{:StaticTypeChecking.checkExpression(e, new BoolType());
                  currentTable = currentTable.newTable(); :}  
                    code_block_loop:cb
                {:currentTable = currentTable.getFather();
                  co.add(new CycleCase(cb,e)); RESULT = co; :}

              | ON expr:e DO DOUBLEDOTTERM
	        {:StaticTypeChecking.checkExpression(e, new BoolType());
                  currentTable = currentTable.newTable(); :}
                    code_block_loop:cb
                {:currentTable = currentTable.getFather();
                  RESULT = (new ArrayList()); RESULT.add(new CycleCase(cb,e)); :}
              ;

// Asignation
dasig     ::= decl_ident_list:il ASIG expr_list:el {: RESULT = new MultipleAssignation(il, el); :};
asig      ::= ident_list:il ASIG expr_list:el {: RESULT = currentTable.checkMultipleAssignations(il, el); :};
// No, it doesn't generate valid asignations only,
// that's checked while building the AST.

// Control structures terminators
fi        ::= END | ENDIF;
elihw     ::= END | ENDWHILE;
rof       ::= END | ENDFOR;
elcyc     ::= END | ENDCYCLE;
fed       ::= END | ENDDEF;


/*
      EXPRESIONS
 */
cast ::= LT type:t GT {: RESULT = t; :}
       |
       ;

expr_list ::= expr_list:el COMMA expr:e  {: RESULT = el; el.add(e); :}
//| expr:e                     {: RESULT = new ArrayList(); RESULT.add(e); :}
            | cast expr:e                     {: RESULT = new ArrayList(); RESULT.add(e); :}
            ;

expr_tuple ::= expr_tuple:el COMMA expr:e  {: RESULT = el; el.add(e); :}
             | expr:e1 COMMA expr:e2       {: RESULT = new ArrayList(); RESULT.add(e1);RESULT.add(e2);:}
             ;

expr  ::= expr:e1 AND expr:e2       {: RESULT = new BinaryExp(sym.AND, e1, e2); :}
        | expr:e1 SAND expr:e2      {: RESULT = new BinaryExp(sym.SAND, e1, e2); :}
        | expr:e1 OR expr:e2        {: RESULT = new BinaryExp(sym.OR, e1, e2); :}
        | expr:e1 SOR expr:e2       {: RESULT = new BinaryExp(sym.SOR, e1, e2); :}
        | expr:e1 XOR expr:e2       {: RESULT = new BinaryExp(sym.XOR, e1, e2); :}
        | LPAREN expr:e RPAREN      {: RESULT = (Expression)e; :}
        | NOEQ:o expr:e             {: RESULT = new UnaryExp(sym.NOEQ, e); :}
        | relational_expr:re        {: RESULT = re; :}
        ;

relational_expr  ::= relational_expr:e1 LT relational_expr:e2  {: RESULT = new BinaryExp(sym.LT,  e1, e2); :}
             | relational_expr:e1 GT relational_expr:e2        {: RESULT = new BinaryExp(sym.GT,  e1, e2); :}
             | relational_expr:e1 LTE relational_expr:e2       {: RESULT = new BinaryExp(sym.LTE, e1, e2); :}
             | relational_expr:e1 GTE relational_expr:e2       {: RESULT = new BinaryExp(sym.GTE, e1, e2); :}
             | relational_expr:e1 SHEQ relational_expr:e2      {: RESULT = new BinaryExp(sym.SHEQ, e1, e2); :}
             | relational_expr:e1 DEEQ relational_expr:e2      {: RESULT = new BinaryExp(sym.DEEQ, e1, e2); :}
             | relational_expr:e1 NOEQ relational_expr:e2      {: RESULT = new BinaryExp(sym.NOEQ, e1, e2); :}
             | LPAREN relational_expr:e RPAREN                 {: RESULT = (Expression)e;:}
             | other_expr:oe                                   {: RESULT = oe;:}
             ;

other_expr   ::=
    /* ----- Basic types ----- */
              other_expr:e1 PLUS other_expr:e2            {: RESULT = new BinaryExp(sym.PLUS, e1, e2); :}
            | other_expr:e1 MINUS other_expr:e2           {: RESULT = new BinaryExp(sym.MINUS, e1, e2); :}
            | other_expr:e1 TIMES other_expr:e2           {: RESULT = new BinaryExp(sym.TIMES, e1, e2); :}
            | other_expr:e1 DIVIDE other_expr:e2          {: RESULT = new BinaryExp(sym.DIVIDE, e1, e2); :}
            | other_expr:e1 MOD other_expr:e2             {: RESULT = new BinaryExp(sym.MOD, e1, e2); :}
            | other_expr:e1 POW other_expr:e2             {: RESULT = new BinaryExp(sym.POW, e1, e2); :}
            | CHAR_V:e                                    {: RESULT = new CharExp(e.charValue()); :}
            | INTEGER_V:e                                 {: RESULT = new IntegerExp(e.intValue()); :}
            | FLOAT_V:e                                   {: RESULT = new FloatExp(e.floatValue()); :}
            | TRUE                                        {: RESULT = new TrueExp(); :}
            | FALSE                                       {: RESULT = new FalseExp(); :}
           // | IDENTIFIER:n                                {: SymTable finded = currentTable.getSymTableForIdOrDie(n); RESULT = new Identifier(n, finded); :}
           // parentitation
            | LPAREN other_expr:e RPAREN                  {: RESULT = (Expression)e; :}
    /* --- Arithmetic, relational and logical operations --- */
//	    | expr:e1 relational_op:o expr:e2	          {: RESULT = new BinaryExp(o.intValue(), e1, e2); :}
//	    | expr:e1 logical_op:o expr:e2	          {: RESULT = new BinaryExp(o.intValue(), e1, e2); :}
            | MINUS:o other_expr:e        	          {: RESULT = new UnaryExp(sym.UMINUS, e); :}

    /* ----- Functions calls ----- */
            | IDENTIFIER:n LPAREN expr_list:el RPAREN  {: RESULT = StaticTypeChecking.checkCallExp(n, el, currentTable); :}
            | IDENTIFIER:n LPAREN RPAREN               {: RESULT = StaticTypeChecking.checkCallExp(n, new ArrayList(), currentTable); :}

    /* ----- Composite types ----- */
            | STRING_V:e                                  {:RESULT=new StringExp(e);:}
            | LBRACKET RBRACKET     /*[] empty list*/     {:RESULT=new ListExp();:}
//            | LBRACET RBRACET   /*{} empty dictionary*/ {:RESULT=new DictExp();:}
            | LBRACKET expr_list:e RBRACKET   /*list*/    {:RESULT=new ListExp(e);:}
            | LBRACET dict_vals:dv RBRACET /*dictionary*/ {:RESULT=new DictExp(dv);:}
            | LPAREN expr_tuple:el RPAREN    /*tuple*/    {:RESULT=new TupleExp(el);:}
    /* ----- LVALUE ----- */
            | l_value_contents:lvc                        {: RESULT = lvc; :}
    /* ----- Composite types operations ----- */
//| IDENTIFIER LBRACKET expr RBRACKET                 // indexing
//| IDENTIFIER LBRACKET other_expr DOUBLEDOT other_expr RBRACKET  // slicing
            | other_expr PLUSPLUS other_expr                                // plosplos
            | other_expr LTLT other_expr                                    // push
            | other_expr GTGT other_expr                                    // pop

    /* ----- Other expressions ----- */
            | READ                                     {: RESULT = new ReadExp(); :}
	    ;

l_value_contents  ::= l_value:lv                       {: RESULT = new LValueContents(lv); :}
                   ;

//Dictionary values
dict_vals       ::= dict_vals:dv COMMA dict_val:v      {:
							if (dv.put(v.get(0),v.get(1))!=null)
							    throw new KeyErrorException("Clave doblemente accesada");
							RESULT = dv;
							:}
                  | dict_val:v                         {: RESULT = new HashMap(); RESULT.put(v.get(0),v.get(1));:}
                  ;
dict_val        ::= IDENTIFIER:id DOUBLEDOT expr:e   {: RESULT = new ArrayList(2); RESULT.add(id); RESULT.add(e);:}
                  ;