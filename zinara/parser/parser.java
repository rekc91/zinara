
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Feb 23 14:41:22 GMT-04:30 2010
//----------------------------------------------------

package zinara.parser;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Feb 23 14:41:22 GMT-04:30 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\006\005\000\002\006\003\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\011\004\000\002\011\004" +
    "\000\002\011\003\000\002\011\003\000\002\012\004\000" +
    "\002\012\003\000\002\013\004\000\002\013\004\000\002" +
    "\015\015\000\002\014\005\000\002\014\003\000\002\016" +
    "\006\000\002\016\005\000\002\047\005\000\002\047\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\004" +
    "\000\002\052\004\000\002\052\004\000\002\052\004\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\006\000\002\052\010\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\006\000\002\052\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\045\005\000\002\045\004\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\007\000\002\026\007\000\002\026\011\000\002" +
    "\026\007\000\002\026\005\000\002\027\010\000\002\027" +
    "\004\000\002\027\004\000\002\046\010\000\002\046\007" +
    "\000\002\030\005\000\002\031\007\000\002\031\003\000" +
    "\002\032\005\000\002\033\007\000\002\033\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\040\003\000\002\040\003\000\002\037\003" +
    "\000\002\037\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\030\022\021\031\024\032\017\033\007\034" +
    "\022\035\015\036\013\037\012\040\016\052\025\103\020" +
    "\001\002\000\030\022\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\052\uffee\103\uffee" +
    "\001\002\000\030\022\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\052\uffeb\103\uffeb" +
    "\001\002\000\030\022\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\052\uffed\103\uffed" +
    "\001\002\000\020\041\ufffb\042\ufffb\043\ufffb\044\ufffb\046" +
    "\ufffb\050\ufffb\061\ufffb\001\002\000\004\046\323\001\002" +
    "\000\004\002\001\001\002\000\022\031\024\032\017\033" +
    "\007\034\022\035\015\036\013\037\012\040\016\001\002" +
    "\000\022\031\024\032\017\033\007\034\022\035\015\036" +
    "\013\037\012\040\016\001\002\000\004\002\313\001\002" +
    "\000\020\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\050" +
    "\ufffa\061\ufffa\001\002\000\004\046\305\001\002\000\020" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\046\ufffc\050\ufffc\061" +
    "\ufffc\001\002\000\004\046\255\001\002\000\046\004\047" +
    "\005\034\006\045\007\056\010\054\011\063\021\064\036" +
    "\050\037\051\040\053\046\043\047\042\053\032\054\057" +
    "\075\046\076\041\077\033\102\062\001\002\000\020\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\050\ufff9\061\ufff9" +
    "\001\002\000\030\022\021\031\024\032\017\033\007\034" +
    "\022\035\015\036\013\037\012\040\016\052\025\103\020" +
    "\001\002\000\020\041\ufffd\042\ufffd\043\ufffd\044\ufffd\046" +
    "\ufffd\050\ufffd\061\ufffd\001\002\000\022\031\024\032\017" +
    "\033\007\034\022\035\015\036\013\037\012\040\016\001" +
    "\002\000\030\022\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\052\uffec\103\uffec\001" +
    "\002\000\030\022\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\052\ufff0\103\ufff0\001" +
    "\002\000\004\002\uffff\001\002\000\030\022\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\052\uffef\103\uffef\001\002\000\120\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\052" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\101\uffc8\103\uffc8\001\002\000\006" +
    "\045\235\100\234\001\002\000\120\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\052\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\101\uffdd\103\uffdd\001\002\000\120\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\022\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\052\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\101\uffe1\103\uffe1\001" +
    "\002\000\056\012\232\013\076\014\111\015\067\016\110" +
    "\017\070\020\102\055\112\056\114\057\105\060\074\061" +
    "\103\062\100\063\104\064\116\065\072\066\075\070\073" +
    "\071\106\072\077\073\071\074\113\001\002\000\004\012" +
    "\uffad\001\002\000\062\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\044\137\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\104" +
    "\141\001\002\000\002\001\002\000\004\012\uffab\001\002" +
    "\000\006\036\211\037\210\001\002\000\004\012\uffac\001" +
    "\002\000\120\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\022\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\052\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\101" +
    "\uffdc\103\uffdc\001\002\000\002\001\002\000\120\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\052\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\070\uffde\071" +
    "\uffde\072\uffde\073\uffde\074\uffde\101\uffde\103\uffde\001\002" +
    "\000\034\004\047\005\034\006\045\007\056\010\054\011" +
    "\063\021\064\036\050\037\051\040\053\041\177\046\043" +
    "\053\032\001\002\000\034\004\047\005\034\006\045\007" +
    "\056\010\054\011\063\021\064\036\050\037\051\040\053" +
    "\042\172\046\043\053\032\001\002\000\120\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\052\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\070\uffda\071\uffda" +
    "\072\uffda\073\uffda\074\uffda\101\uffda\103\uffda\001\002\000" +
    "\006\043\161\046\160\001\002\000\120\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\052" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\101\uffe0\103\uffe0\001\002\000\004" +
    "\012\uffae\001\002\000\120\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\052\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb" +
    "\074\uffdb\101\uffdb\103\uffdb\001\002\000\004\037\155\001" +
    "\002\000\020\023\154\047\042\054\057\075\046\076\041" +
    "\077\033\102\062\001\002\000\004\012\153\001\002\000" +
    "\004\046\125\001\002\000\120\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\052\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\070\uffdf\071\uffdf\072\uffdf\073" +
    "\uffdf\074\uffdf\101\uffdf\103\uffdf\001\002\000\032\004\047" +
    "\005\034\006\045\007\056\010\054\011\063\021\064\036" +
    "\050\037\051\040\053\046\043\053\032\001\002\000\120" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\022\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\052\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\101\uffd9\103\uffd9" +
    "\001\002\000\120\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\022\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\052\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\101\uffd5\103\uffd5\001\002\000\032\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\021\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\046\uffc5\053\uffc5\001\002\000\032\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\021\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\046\uffc3\053\uffc3\001\002\000\032\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\021\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\046\uffb7\053\uffb7\001\002\000" +
    "\032\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\021\uffbc\036\uffbc\037\uffbc\040\uffbc\046\uffbc\053\uffbc\001" +
    "\002\000\032\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\021\uffba\036\uffba\037\uffba\040\uffba\046\uffba\053" +
    "\uffba\001\002\000\032\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\021\uffc1\036\uffc1\037\uffc1\040\uffc1\046" +
    "\uffc1\053\uffc1\001\002\000\032\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\021\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\046\uffbb\053\uffbb\001\002\000\032\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\021\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\046\uffc7\053\uffc7\001\002\000\032\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\021\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\046\uffb8\053\uffb8\001\002\000\032" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\021" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\046\uffbf\053\uffbf\001\002" +
    "\000\032\004\047\005\034\006\045\007\056\010\054\011" +
    "\063\021\064\036\050\037\051\040\053\046\043\053\032" +
    "\001\002\000\032\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\021\uffc2\036\uffc2\037\uffc2\040\uffc2\046\uffc2" +
    "\053\uffc2\001\002\000\032\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\021\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\046\uffc0\053\uffc0\001\002\000\032\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\021\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\046\uffbe\053\uffbe\001\002\000\032\004\047\005" +
    "\034\006\045\007\056\010\054\011\063\021\064\036\050" +
    "\037\051\040\053\046\043\053\032\001\002\000\032\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\021\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\046\uffb9\053\uffb9\001\002\000" +
    "\032\004\047\005\034\006\045\007\056\010\054\011\063" +
    "\021\064\036\050\037\051\040\053\046\043\053\032\001" +
    "\002\000\032\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\021\uffc4\036\uffc4\037\uffc4\040\uffc4\046\uffc4\053" +
    "\uffc4\001\002\000\032\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\021\uffc6\036\uffc6\037\uffc6\040\uffc6\046" +
    "\uffc6\053\uffc6\001\002\000\032\004\047\005\034\006\045" +
    "\007\056\010\054\011\063\021\064\036\050\037\051\040" +
    "\053\046\043\053\032\001\002\000\032\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\021\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\046\uffb6\053\uffb6\001\002\000\032\004\047" +
    "\005\034\006\045\007\056\010\054\011\063\021\064\036" +
    "\050\037\051\040\053\046\043\053\032\001\002\000\032" +
    "\004\047\005\034\006\045\007\056\010\054\011\063\021" +
    "\064\036\050\037\051\040\053\046\043\053\032\001\002" +
    "\000\032\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\021\uffbd\036\uffbd\037\uffbd\040\uffbd\046\uffbd\053\uffbd" +
    "\001\002\000\120\012\uffd7\013\076\014\111\015\067\016" +
    "\110\017\070\020\102\022\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\052\uffd7\055\112\056\114" +
    "\057\105\060\074\061\103\062\100\063\104\064\116\065" +
    "\072\066\075\070\073\071\106\072\077\073\071\074\113" +
    "\101\uffd7\103\uffd7\001\002\000\120\012\uffcb\013\076\014" +
    "\111\015\067\016\110\017\070\020\102\022\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\052\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\074\061\103\062\100\063" +
    "\104\064\uffcb\065\uffcb\066\uffcb\070\uffcb\071\uffcb\072\uffcb" +
    "\073\uffcb\074\uffcb\101\uffcb\103\uffcb\001\002\000\120\012" +
    "\uffcc\013\076\014\111\015\067\016\110\017\070\020\102" +
    "\022\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\052\uffcc\055\uffcc\056\uffcc\057\uffcc\060\074\061" +
    "\103\062\100\063\104\064\uffcc\065\uffcc\066\uffcc\070\uffcc" +
    "\071\uffcc\072\uffcc\073\uffcc\074\uffcc\101\uffcc\103\uffcc\001" +
    "\002\000\120\012\uffd8\013\076\014\111\015\067\016\110" +
    "\017\070\020\102\022\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\052\uffd8\055\112\056\114\057" +
    "\105\060\074\061\103\062\100\063\104\064\116\065\072" +
    "\066\075\070\073\071\106\072\077\073\071\074\113\101" +
    "\uffd8\103\uffd8\001\002\000\120\012\uffca\013\076\014\111" +
    "\015\067\016\110\017\070\020\102\022\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\052\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\074\061\103\062\100\063\104" +
    "\064\uffca\065\uffca\066\uffca\070\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\101\uffca\103\uffca\001\002\000\120\012\uffd6" +
    "\013\076\014\111\015\067\016\110\017\070\020\102\022" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\052\uffd6\055\112\056\114\057\105\060\074\061\103" +
    "\062\100\063\104\064\116\065\072\066\075\070\073\071" +
    "\106\072\077\073\071\074\113\101\uffd6\103\uffd6\001\002" +
    "\000\004\067\126\001\002\000\032\004\047\005\034\006" +
    "\045\007\056\010\054\011\063\021\064\036\050\037\051" +
    "\040\053\046\043\053\032\001\002\000\056\013\076\014" +
    "\111\015\067\016\110\017\070\020\102\045\130\055\112" +
    "\056\114\057\105\060\074\061\103\062\100\063\104\064" +
    "\116\065\072\066\075\070\073\071\106\072\077\073\071" +
    "\074\113\001\002\000\046\004\047\005\034\006\045\007" +
    "\056\010\054\011\063\021\064\036\050\037\051\040\053" +
    "\046\043\047\042\053\032\054\057\075\046\076\041\077" +
    "\033\102\062\001\002\000\022\023\136\026\134\047\042" +
    "\054\057\075\046\076\041\077\033\102\062\001\002\000" +
    "\004\012\147\001\002\000\006\044\137\104\141\001\002" +
    "\000\004\012\uff95\001\002\000\004\012\uffa8\001\002\000" +
    "\004\012\uff96\001\002\000\002\001\002\000\032\004\047" +
    "\005\034\006\045\007\056\010\054\011\063\021\064\036" +
    "\050\037\051\040\053\046\043\053\032\001\002\000\032" +
    "\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\021" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\046\uff9b\053\uff9b\001\002" +
    "\000\056\012\uff9d\013\076\014\111\015\067\016\110\017" +
    "\070\020\102\055\112\056\114\057\105\060\074\061\103" +
    "\062\100\063\104\064\116\065\072\066\075\070\073\071" +
    "\106\072\077\073\071\074\113\001\002\000\006\044\137" +
    "\104\141\001\002\000\032\004\047\005\034\006\045\007" +
    "\056\010\054\011\063\021\064\036\050\037\051\040\053" +
    "\046\043\053\032\001\002\000\056\013\076\014\111\015" +
    "\067\016\110\017\070\020\102\044\146\055\112\056\114" +
    "\057\105\060\074\061\103\062\100\063\104\064\116\065" +
    "\072\066\075\070\073\071\106\072\077\073\071\074\113" +
    "\001\002\000\032\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\021\uff9c\036\uff9c\037\uff9c\040\uff9c\046\uff9c" +
    "\053\uff9c\001\002\000\046\004\047\005\034\006\045\007" +
    "\056\010\054\011\063\021\064\036\050\037\051\040\053" +
    "\046\043\047\042\053\032\054\057\075\046\076\041\077" +
    "\033\102\062\001\002\000\046\004\047\005\034\006\045" +
    "\007\056\010\054\011\063\021\064\036\050\037\051\040" +
    "\053\046\043\047\042\053\032\054\057\075\046\076\041" +
    "\077\033\102\062\001\002\000\056\012\152\013\076\014" +
    "\111\015\067\016\110\017\070\020\102\055\112\056\114" +
    "\057\105\060\074\061\103\062\100\063\104\064\116\065" +
    "\072\066\075\070\073\071\106\072\077\073\071\074\113" +
    "\001\002\000\064\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\036\uffa5\037\uffa5\040\uffa5\046\uffa5\047" +
    "\uffa5\053\uffa5\054\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5" +
    "\102\uffa5\001\002\000\064\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\021\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\036\uffa4\037\uffa4\040\uffa4\046" +
    "\uffa4\047\uffa4\053\uffa4\054\uffa4\075\uffa4\076\uffa4\077\uffa4" +
    "\100\uffa4\102\uffa4\001\002\000\004\002\ufffe\001\002\000" +
    "\004\035\156\001\002\000\004\042\157\001\002\000\004" +
    "\012\uff90\001\002\000\004\045\167\001\002\000\120\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\022\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\052\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\101\uffd2\103\uffd2\001" +
    "\002\000\006\043\165\044\164\001\002\000\006\043\uffb2" +
    "\044\uffb2\001\002\000\004\046\160\001\002\000\120\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\022\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\052\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\070\uffcf" +
    "\071\uffcf\072\uffcf\073\uffcf\074\uffcf\101\uffcf\103\uffcf\001" +
    "\002\000\006\043\uffb3\044\uffb3\001\002\000\032\004\047" +
    "\005\034\006\045\007\056\010\054\011\063\021\064\036" +
    "\050\037\051\040\053\046\043\053\032\001\002\000\060" +
    "\013\076\014\111\015\067\016\110\017\070\020\102\043" +
    "\uffb1\044\uffb1\055\112\056\114\057\105\060\074\061\103" +
    "\062\100\063\104\064\116\065\072\066\075\070\073\071" +
    "\106\072\077\073\071\074\113\001\002\000\062\013\076" +
    "\014\111\015\067\016\110\017\070\020\102\041\uffb4\042" +
    "\uffb4\044\uffb4\055\112\056\114\057\105\060\074\061\103" +
    "\062\100\063\104\064\116\065\072\066\075\070\073\071" +
    "\106\072\077\073\071\074\113\001\002\000\120\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\052\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\070\uffd3\071" +
    "\uffd3\072\uffd3\073\uffd3\074\uffd3\101\uffd3\103\uffd3\001\002" +
    "\000\006\042\175\044\174\001\002\000\032\004\047\005" +
    "\034\006\045\007\056\010\054\011\063\021\064\036\050" +
    "\037\051\040\053\046\043\053\032\001\002\000\120\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\022\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\052\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\074\uffd0\101\uffd0\103\uffd0\001" +
    "\002\000\062\013\076\014\111\015\067\016\110\017\070" +
    "\020\102\041\uffb5\042\uffb5\044\uffb5\055\112\056\114\057" +
    "\105\060\074\061\103\062\100\063\104\064\116\065\072" +
    "\066\075\070\073\071\106\072\077\073\071\074\113\001" +
    "\002\000\120\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\052\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\101" +
    "\uffd4\103\uffd4\001\002\000\006\041\201\044\174\001\002" +
    "\000\120\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\022\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\052\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\101\uffd1" +
    "\103\uffd1\001\002\000\004\045\203\001\002\000\046\004" +
    "\047\005\034\006\045\007\056\010\054\011\063\021\064" +
    "\036\050\037\051\040\053\046\043\047\042\053\032\054" +
    "\057\075\046\076\041\077\033\102\062\001\002\000\022" +
    "\023\205\024\207\047\042\054\057\075\046\076\041\077" +
    "\033\102\062\001\002\000\004\012\uff9a\001\002\000\004" +
    "\012\uffaa\001\002\000\004\012\uff99\001\002\000\032\004" +
    "\047\005\034\006\045\007\056\010\054\011\063\021\064" +
    "\036\050\037\051\040\053\046\043\053\032\001\002\000" +
    "\032\004\047\005\034\006\045\007\056\010\054\011\063" +
    "\021\064\036\050\037\051\040\053\046\043\053\032\001" +
    "\002\000\060\013\076\014\111\015\067\016\110\017\070" +
    "\020\102\041\213\045\214\055\112\056\114\057\105\060" +
    "\074\061\103\062\100\063\104\064\116\065\072\066\075" +
    "\070\073\071\106\072\077\073\071\074\113\001\002\000" +
    "\120\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\022\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\052\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\101\uffce\103" +
    "\uffce\001\002\000\032\004\047\005\034\006\045\007\056" +
    "\010\054\011\063\021\064\036\050\037\051\040\053\046" +
    "\043\053\032\001\002\000\056\013\076\014\111\015\067" +
    "\016\110\017\070\020\102\041\216\055\112\056\114\057" +
    "\105\060\074\061\103\062\100\063\104\064\116\065\072" +
    "\066\075\070\073\071\106\072\077\073\071\074\113\001" +
    "\002\000\120\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\022\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\052\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\101" +
    "\uffcd\103\uffcd\001\002\000\006\042\222\044\221\001\002" +
    "\000\060\013\076\014\111\015\067\016\110\017\070\020" +
    "\102\042\uffe2\044\uffe2\055\112\056\114\057\105\060\074" +
    "\061\103\062\100\063\104\064\116\065\072\066\075\070" +
    "\073\071\106\072\077\073\071\074\113\001\002\000\032" +
    "\004\047\005\034\006\045\007\056\010\054\011\063\021" +
    "\064\036\050\037\051\040\053\046\043\053\032\001\002" +
    "\000\120\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\022\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\052\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\101\uffc9" +
    "\103\uffc9\001\002\000\060\013\076\014\111\015\067\016" +
    "\110\017\070\020\102\042\uffe3\044\uffe3\055\112\056\114" +
    "\057\105\060\074\061\103\062\100\063\104\064\116\065" +
    "\072\066\075\070\073\071\106\072\077\073\071\074\113" +
    "\001\002\000\004\045\225\001\002\000\046\004\047\005" +
    "\034\006\045\007\056\010\054\011\063\021\064\036\050" +
    "\037\051\040\053\046\043\047\042\053\032\054\057\075" +
    "\046\076\041\077\033\102\062\001\002\000\022\023\230" +
    "\025\231\047\042\054\057\075\046\076\041\077\033\102" +
    "\062\001\002\000\004\012\uffa9\001\002\000\004\012\uff98" +
    "\001\002\000\004\012\uff97\001\002\000\064\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\021\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\046\uffa3\047\uffa3\053\uffa3\054\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\100\uffa3\102\uffa3\001\002\000\010\023" +
    "\243\027\240\100\241\001\002\000\032\004\047\005\034" +
    "\006\045\007\056\010\054\011\063\021\064\036\050\037" +
    "\051\040\053\046\043\053\032\001\002\000\046\004\047" +
    "\005\034\006\045\007\056\010\054\011\063\021\064\036" +
    "\050\037\051\040\053\046\043\047\042\053\032\054\057" +
    "\075\046\076\041\077\033\102\062\001\002\000\020\047" +
    "\042\054\057\075\046\076\041\077\033\100\234\102\062" +
    "\001\002\000\010\023\243\027\240\100\241\001\002\000" +
    "\004\012\uff93\001\002\000\032\004\047\005\034\006\045" +
    "\007\056\010\054\011\063\021\064\036\050\037\051\040" +
    "\053\046\043\053\032\001\002\000\004\012\uffa7\001\002" +
    "\000\004\012\uff94\001\002\000\056\013\076\014\111\015" +
    "\067\016\110\017\070\020\102\055\112\056\114\057\105" +
    "\060\074\061\103\062\100\063\104\064\116\065\072\066" +
    "\075\070\073\071\106\072\077\073\071\074\113\101\245" +
    "\001\002\000\004\045\246\001\002\000\046\004\047\005" +
    "\034\006\045\007\056\010\054\011\063\021\064\036\050" +
    "\037\051\040\053\046\043\047\042\053\032\054\057\075" +
    "\046\076\041\077\033\102\062\001\002\000\024\023\uffa2" +
    "\027\uffa2\047\042\054\057\075\046\076\041\077\033\100" +
    "\uffa2\102\062\001\002\000\056\013\076\014\111\015\067" +
    "\016\110\017\070\020\102\055\112\056\114\057\105\060" +
    "\074\061\103\062\100\063\104\064\116\065\072\066\075" +
    "\070\073\071\106\072\077\073\071\074\113\101\251\001" +
    "\002\000\004\045\252\001\002\000\046\004\047\005\034" +
    "\006\045\007\056\010\054\011\063\021\064\036\050\037" +
    "\051\040\053\046\043\047\042\053\032\054\057\075\046" +
    "\076\041\077\033\102\062\001\002\000\024\023\uffa1\027" +
    "\uffa1\047\042\054\057\075\046\076\041\077\033\100\uffa1" +
    "\102\062\001\002\000\004\012\uffa6\001\002\000\004\037" +
    "\256\001\002\000\006\046\261\051\260\001\002\000\006" +
    "\044\uffe6\050\uffe6\001\002\000\004\046\300\001\002\000" +
    "\004\045\276\001\002\000\006\044\263\050\264\001\002" +
    "\000\006\046\261\051\260\001\002\000\004\060\265\001" +
    "\002\000\022\031\024\032\017\033\007\034\022\035\015" +
    "\036\013\037\012\040\016\001\002\000\004\061\267\001" +
    "\002\000\004\045\270\001\002\000\046\004\047\005\034" +
    "\006\045\007\056\010\054\011\063\021\064\036\050\037" +
    "\051\040\053\046\043\047\042\053\032\054\057\075\046" +
    "\076\041\077\033\102\062\001\002\000\022\023\274\030" +
    "\272\047\042\054\057\075\046\076\041\077\033\102\062" +
    "\001\002\000\030\022\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\052\uff91\103\uff91" +
    "\001\002\000\030\022\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\052\uffe8\103\uffe8" +
    "\001\002\000\030\022\uff92\031\uff92\032\uff92\033\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\052\uff92\103\uff92" +
    "\001\002\000\006\044\uffe7\050\uffe7\001\002\000\022\031" +
    "\024\032\017\033\007\034\022\035\015\036\013\037\012" +
    "\040\016\001\002\000\006\044\uffe4\050\uffe4\001\002\000" +
    "\004\045\301\001\002\000\022\031\024\032\017\033\007" +
    "\034\022\035\015\036\013\037\012\040\016\001\002\000" +
    "\006\044\uffe5\050\uffe5\001\002\000\006\043\311\044\310" +
    "\001\002\000\006\043\ufff2\044\ufff2\001\002\000\004\045" +
    "\306\001\002\000\022\031\024\032\017\033\007\034\022" +
    "\035\015\036\013\037\012\040\016\001\002\000\006\043" +
    "\ufff1\044\ufff1\001\002\000\004\046\305\001\002\000\020" +
    "\041\ufff6\042\ufff6\043\ufff6\044\ufff6\046\ufff6\050\ufff6\061" +
    "\ufff6\001\002\000\006\043\ufff3\044\ufff3\001\002\000\004" +
    "\002\000\001\002\000\004\041\315\001\002\000\020\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\050\ufff8\061\ufff8" +
    "\001\002\000\006\042\321\044\320\001\002\000\006\042" +
    "\ufff4\044\ufff4\001\002\000\022\031\024\032\017\033\007" +
    "\034\022\035\015\036\013\037\012\040\016\001\002\000" +
    "\020\041\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\050\ufff7" +
    "\061\ufff7\001\002\000\006\042\ufff5\044\ufff5\001\002\000" +
    "\034\022\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\044\325\052\uffe9\103\uffe9\104" +
    "\327\001\002\000\030\022\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\052\uffea\103" +
    "\uffea\001\002\000\004\046\331\001\002\000\032\004\047" +
    "\005\034\006\045\007\056\010\054\011\063\021\064\036" +
    "\050\037\051\040\053\046\043\053\032\001\002\000\032" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\021" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\046\uff9e\053\uff9e\001\002" +
    "\000\102\013\076\014\111\015\067\016\110\017\070\020" +
    "\102\022\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\052\uffa0\055\112\056\114\057" +
    "\105\060\074\061\103\062\100\063\104\064\116\065\072" +
    "\066\075\070\073\071\106\072\077\073\071\074\113\103" +
    "\uffa0\001\002\000\006\044\325\104\327\001\002\000\032" +
    "\004\047\005\034\006\045\007\056\010\054\011\063\021" +
    "\064\036\050\037\051\040\053\046\043\053\032\001\002" +
    "\000\056\013\076\014\111\015\067\016\110\017\070\020" +
    "\102\044\334\055\112\056\114\057\105\060\074\061\103" +
    "\062\100\063\104\064\116\065\072\066\075\070\073\071" +
    "\106\072\077\073\071\074\113\001\002\000\032\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\021\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\046\uff9f\053\uff9f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\020\003\013\004\010\005\007\011\022\012" +
    "\003\013\004\015\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\323\001\001\000\002\001\001\000\006\005\316\006\315" +
    "\001\001\000\004\005\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\302\010\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\060\026\043\027" +
    "\057\032\054\042\036\043\034\044\037\051\051\052\035" +
    "\001\001\000\002\001\001\000\014\004\027\005\007\012" +
    "\026\013\004\015\030\001\001\000\002\001\001\000\006" +
    "\005\007\013\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\106\020\114\021\100\001\001\000\002" +
    "\001\001\000\004\033\137\001\001\000\004\034\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\201\001\001\000\002\001" +
    "\001\000\014\022\177\043\034\044\064\051\051\052\170" +
    "\001\001\000\014\022\172\043\034\044\064\051\051\052" +
    "\170\001\001\000\002\001\001\000\006\023\161\024\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\131\026\043\032\054" +
    "\042\036\044\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\043\034\044\064\051\051" +
    "\052\065\001\001\000\002\001\001\000\010\017\106\020" +
    "\114\021\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\043\034\044\064\051" +
    "\051\052\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\043\034\044\064\051\051\052" +
    "\122\001\001\000\002\001\001\000\012\043\034\044\064" +
    "\051\051\052\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\043\034\044\064\051\051\052\120\001\001" +
    "\000\002\001\001\000\012\043\034\044\064\051\051\052" +
    "\117\001\001\000\012\043\034\044\064\051\051\052\116" +
    "\001\001\000\002\001\001\000\010\017\106\020\114\021" +
    "\100\001\001\000\010\017\106\020\114\021\100\001\001" +
    "\000\010\017\106\020\114\021\100\001\001\000\010\017" +
    "\106\020\114\021\100\001\001\000\010\017\106\020\114" +
    "\021\100\001\001\000\010\017\106\020\114\021\100\001" +
    "\001\000\002\001\001\000\012\043\034\044\064\051\051" +
    "\052\126\001\001\000\010\017\106\020\114\021\100\001" +
    "\001\000\024\025\060\026\043\027\130\032\054\042\036" +
    "\043\034\044\037\051\051\052\035\001\001\000\016\025" +
    "\131\026\043\032\054\040\134\042\036\044\132\001\001" +
    "\000\002\001\001\000\004\033\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\142" +
    "\001\001\000\012\043\034\044\064\051\051\052\141\001" +
    "\001\000\002\001\001\000\010\017\106\020\114\021\100" +
    "\001\001\000\004\033\143\001\001\000\012\043\034\044" +
    "\064\051\051\052\144\001\001\000\010\017\106\020\114" +
    "\021\100\001\001\000\002\001\001\000\024\025\060\026" +
    "\043\027\147\032\054\042\036\043\034\044\037\051\051" +
    "\052\035\001\001\000\022\025\131\026\043\032\054\042" +
    "\036\043\034\044\037\051\051\052\150\001\001\000\010" +
    "\017\106\020\114\021\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\043" +
    "\034\044\064\051\051\052\167\001\001\000\010\017\106" +
    "\020\114\021\100\001\001\000\010\017\106\020\114\021" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\043\034\044\064\051\051\052\175\001\001\000\002\001" +
    "\001\000\010\017\106\020\114\021\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\025\060\026\043\027\203\032\054\042\036" +
    "\043\034\044\037\051\051\052\035\001\001\000\016\025" +
    "\131\026\043\032\054\035\205\042\036\044\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\043\034\044\064\047\216\051\051\052\217\001\001" +
    "\000\012\043\034\044\064\051\051\052\211\001\001\000" +
    "\010\017\106\020\114\021\100\001\001\000\002\001\001" +
    "\000\012\043\034\044\064\051\051\052\214\001\001\000" +
    "\010\017\106\020\114\021\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\106\020\114\021\100\001" +
    "\001\000\012\043\034\044\064\051\051\052\222\001\001" +
    "\000\002\001\001\000\010\017\106\020\114\021\100\001" +
    "\001\000\002\001\001\000\024\025\060\026\043\027\225" +
    "\032\054\042\036\043\034\044\037\051\051\052\035\001" +
    "\001\000\016\025\131\026\043\032\054\036\226\042\036" +
    "\044\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\253\001\001" +
    "\000\012\043\034\044\064\051\051\052\247\001\001\000" +
    "\024\025\060\026\043\027\235\032\054\042\036\043\034" +
    "\044\037\051\051\052\035\001\001\000\016\025\131\026" +
    "\043\032\054\042\036\044\132\046\236\001\001\000\004" +
    "\037\241\001\001\000\002\001\001\000\012\043\034\044" +
    "\064\051\051\052\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\106\020\114\021\100\001\001\000" +
    "\002\001\001\000\024\025\060\026\043\027\246\032\054" +
    "\042\036\043\034\044\037\051\051\052\035\001\001\000" +
    "\014\025\131\026\043\032\054\042\036\044\132\001\001" +
    "\000\010\017\106\020\114\021\100\001\001\000\002\001" +
    "\001\000\024\025\060\026\043\027\252\032\054\042\036" +
    "\043\034\044\037\051\051\052\035\001\001\000\014\025" +
    "\131\026\043\032\054\042\036\044\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\261\016\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\274\001\001\000\002\001" +
    "\001\000\004\005\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\025\060\026\043\027\270\032\054\042" +
    "\036\043\034\044\037\051\051\052\035\001\001\000\016" +
    "\025\131\026\043\032\054\041\272\042\036\044\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\306\001\001\000\002\001\001\000\004" +
    "\010\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\043\034\044" +
    "\064\051\051\052\327\001\001\000\002\001\001\000\010" +
    "\017\106\020\114\021\100\001\001\000\004\031\331\001" +
    "\001\000\012\043\034\044\064\051\051\052\332\001\001" +
    "\000\010\017\106\020\114\021\100\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 scanner.init();              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // print ::= PRINT LPAREN STRING RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // fed ::= ENDDEF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*fed*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // fed ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*fed*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // elcyc ::= ENDCYCLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*elcyc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // elcyc ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*elcyc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // rof ::= ENDFOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*rof*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // rof ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*rof*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // elihw ::= ENDWHILE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*elihw*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // elihw ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*elihw*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // fi ::= ENDIF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*fi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // fi ::= END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*fi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asig_list ::= ASIG 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*asig_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asig_list ::= COMMA identifier asig_list expr COMMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*asig_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asig ::= identifier asig_list expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*asig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // s_asig_list ::= ASIG 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*s_asig_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // s_asig_list ::= COMMA IDENTIFIER s_asig_list expr COMMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*s_asig_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // s_asig ::= IDENTIFIER s_asig_list expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*s_asig*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cycle_blocks ::= ON expr DO DOUBLEDOT code_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*cycle_blocks*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cycle_blocks ::= cycle_blocks ON expr DO DOUBLEDOT code_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*cycle_blocks*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // code_block ::= expr SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*code_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // code_block ::= instruction SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*code_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // code_block ::= code_block instruction SEMI code_block expr SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*code_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ctrl_struct ::= CYCLE cycle_blocks elcyc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ctrl_struct ::= CYCLE DOUBLEDOT code_block cycle_blocks elcyc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ctrl_struct ::= FOR IDENTIFIER IN expr DOUBLEDOT code_block rof 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ctrl_struct ::= WHILE conds DOUBLEDOT code_block elihw 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ctrl_struct ::= IF conds DOUBLEDOT code_block fi 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ctrl_struct*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // instruction ::= RETURN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // instruction ::= ctrl_struct 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // instruction ::= print 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instruction ::= asig 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // inst_list ::= instruction SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*inst_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inst_list ::= inst_list instruction SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*inst_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dict_val ::= IDENTIFIER DOUBLEDOT expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*dict_val*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dict_vals ::= dict_val 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*dict_vals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dict_vals ::= dict_vals COMMA dict_val 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*dict_vals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_comma_list ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr_comma_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_comma_list ::= expr_comma_list COMMA expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr_comma_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logical_op ::= XOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logical_op ::= SOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical_op ::= OR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical_op ::= SAND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logical_op ::= AND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*logical_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relational_op ::= NOEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relational_op ::= DEEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relational_op ::= SHEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relational_op ::= GTE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational_op ::= LTE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relational_op ::= GT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_op ::= LT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*relational_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arithmetic_op ::= POW 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arithmetic_op ::= MOD 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arithmetic_op ::= DIVIDE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arithmetic_op ::= TIMES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arithmetic_op ::= MINUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arithmetic_op ::= PLUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*arithmetic_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= READ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= IDENTIFIER LPAREN expr_list RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr GTGT expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr LTLT expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr PLUSPLUS expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= IDENTIFIER LBRACKET expr DOUBLEDOT expr RBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= IDENTIFIER LBRACKET expr RBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LBRACET dict_vals RBRACET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= LPAREN expr_comma_list RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LBRACKET expr_comma_list RBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LBRACET RBRACET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= LBRACKET RBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= UMINUS expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr logical_op expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr relational_op expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr arithmetic_op expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= bool 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= FALSE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= TRUE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= FLOAT_V 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= INTEGER_V 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= STRING_V 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= CHAR_V 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= number 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_list ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_list ::= expr_list COMMA expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arg ::= IDENTIFIER DOUBLEDOT type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arg ::= COPY IDENTIFIER DOUBLEDOT type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // args_list ::= arg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*args_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // args_list ::= args_list COMMA arg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*args_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_decl ::= DEF IDENTIFIER LPAREN args_list RETURNS LT type GT DOUBLEDOT code_block fed 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*def_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl ::= type IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl ::= type s_asig 
            {
              Object RESULT = null;
		 new Declaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= decl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= VAR decl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl_list ::= def_decl 
            {
              Object RESULT = null;
		 new Declaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_list ::= declaration 
            {
              Object RESULT = null;
		 new Declaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl_list ::= decl_list def_decl 
            {
              Object RESULT = null;
		 new Declaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl_list ::= decl_list declaration 
            {
              Object RESULT = null;
		 new Declaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dict_type ::= IDENTIFIER DOUBLEDOT type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*dict_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dict_types ::= dict_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*dict_types*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dict_types ::= dict_types COMMA dict_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*dict_types*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_list ::= type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= type_list COMMA type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= LBRACET dict_types RBRACET 
            {
              Object RESULT = null;
		 new String("Int"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= LPAREN type_list RPAREN 
            {
              Object RESULT = null;
		 new String("Int"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= LBRACKET type RBRACKET 
            {
              Object RESULT = null;
		 new String("List_"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BOOL 
            {
              Object RESULT = null;
		 new String("Bool"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= STRING 
            {
              Object RESULT = null;
		 new String("String"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= CHAR 
            {
              Object RESULT = null;
		 new String("Char"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= FLOAT 
            {
              Object RESULT = null;
		 new String("Float"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= INTEGER 
            {
              Object RESULT = null;
		 new String("Int"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= MAIN code_block END 
            {
              Object RESULT = null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Main(cb); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*main*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decl_list main 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 new Program(m,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= main 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 new Program(m,NULL); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

